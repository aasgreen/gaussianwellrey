(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    291301,       6224]
NotebookOptionsPosition[    283853,       5993]
NotebookOutlinePosition[    284287,       6010]
CellTagsIndexPosition[    284244,       6007]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "notebook", " ", "is", " ", "going", " ", "to", " ", "help", 
     " ", "me", " ", "do", " ", "the", " ", "analytics", " ", "for", " ", 
     "my", " ", "approximate", " ", "raman"}], "-", "tunneling"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"First", ",", " ", 
    RowBox[{
    "choose", " ", "a", " ", "function", " ", "that", " ", "seems", " ", "to",
      " ", "work", " ", "out", " ", 
     RowBox[{"WigMaker", "[", 
      RowBox[{"V_", ",", "c_", ",", "b_", ",", "L_", ",", "p_"}], "]"}]}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.575510940113557*^9, 3.575510984626664*^9}, {
  3.575511026225975*^9, 3.575511026560451*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"W", " ", "=", " ", 
  RowBox[{"WigMaker", "[", 
   RowBox[{"1300", ",", ".5", ",", "1.1", ",", "12", ",", "200"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.575510986820182*^9, 3.575510994081814*^9}, {
  3.575511028949059*^9, 3.575511056043173*^9}, {3.575511293629101*^9, 
  3.575511294420233*^9}, {3.575511332152378*^9, 3.575511332255096*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Wig1$6559", ",", "Wig2$6559", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "11438.846398218382`"}], ",", 
     RowBox[{"-", "11436.488229471955`"}], ",", 
     RowBox[{"-", "11410.062244233535`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.575511061395562*^9, 3.575511299694748*^9, 
  3.575511337288736*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"W", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}], ",", 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "2"}], "*", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "+", 
           RowBox[{"1.1", "/", "2"}]}], ")"}], "2"]}], "]"}], "+", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "2"}], "*", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"1.1", "/", "2"}]}], ")"}], "2"]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.575511064106707*^9, 3.575511095305677*^9}, {
  3.575511156962122*^9, 3.575511222386786*^9}, {3.575511272552433*^9, 
  3.5755112819455*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
SQVZPd4GstyWwOsTKeWTaH35RKLEFoqc/VDD4fT3k2gqqfnOuhGz3Hdp8WuZ
MZNIo13mdWwLVU7lRcyrnJeT6J0uZURDY7Mc9ykHepHtJBK+q86zFM4i5+33
U6LMZBJtSmHelG3KJjf1Xc2yUnsSnfhQ6rLMv12u1oevp1ZyEsnplJcXnmaX
O9b/gq1RYBJ1hfRcf3KNQy5cbFmpec8kehKeQrMP2Cl3t/dTTvvyBHrw2jov
Q3iPXI/omb+dIxNI+aN4HVP4XjmFJ8n7e75OICXrDO0UTi653cKu/t8rJtCi
dFCJvzGPnIf736qBzAm0LYT4WkfogNzIZ+2lodgJ5KcrWFDmfVCu0kXo1ujj
CfTnr2yoagifnGD76zcT9ydQ1n3djfacQ3JB/MSO6ZsTyEJ5M/+bH4flzFq/
0JbOTaCbXZyTD+4dkWvjU3RYPTWBQn6Vxt3+LCgn45iZTj8ygX44Rx7RVROS
23bw6V7KlglUyJ7vb+8sKvfIfkpj0+o4Ere/4zQkeVxuqPHa061j4yhcslvO
yktMrtj25MyO1nF08fiVsiK3k3J89dGCu9A4eqaWavs7UFzuOddmw73Z4yiC
VHiNLVdCzqjmR/P+oHFkaMvXePuwlJwyLN369ngcSXDOk4tDpOWOFW0nRNmO
I/tIfe0wLhm5tbSzEpwXxxGo/5WptgS5X4f1W7/Ij6N/ObAr+LSc3IeY++ah
YuPo/VEJy41AebnwoLdRHNvHke6S/NrJRAU5d5byUx0bY0hPvT6vsFZRzsy7
sy1wcgwJ3NDLCJlXkpN4RKGwfRpD3FNL1V3+ynL75nhiWyrH0M3nH1TYZlXk
SNanTvtnjqHtK0nF6taqcm3Gt+9uChhDL7Ye+URK+k+u6Ks7tcF1DIn+qviS
YaIpF3M5PP7p3TEkqJF41jhKS87qQlMX6b8xdLt43To44pKcds3AvSrZMbSg
n86z5b22nAysbPYQGUPHEuY6L3/Skdt0Qpi2vnUMmWZ3qhgq6spNpin2lK2O
oi8cW9nTQ/Xkug9fv/9odBT5q/aE/F39H8PVHc/1G8S/JEkSkp+I7JBVEcnz
vW9IdiVKdlLSIoSksjJLyMyeWdmb+shKVvbee+/x9bV+/rzXc8/dvd/P3T13
9yGe+XPiZu0stnt+aTVvXw+8/RMI+cWz2F8Pcdoz0QZgSfOrxzrl4D6rujPd
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
Qv6nWTUmSqTzFhlcAWvFPf26xSpsvW19VdZjBeiEfP0mtyuxpNKwcO/eZVBa
zSGeZazA2iIfy5t4LMHrQ5ufOT1/YdojdBLWx+dAfh37LnriF+ahuGh+6fcs
MEx6/EaBP7GH4lTvX7+ehfRalvX7MaVY0tAJFo/BGZjww+v5FxVjlcnurTTF
06DN4SZ4aCYf68iWO/TecxJs7QV9/gamY87y8SuhgaOgvrDUkZH4A1vLjDPX
0RsFPuOCs0EFaRgqy29K4B6FdiX5LOPuFGzMPPlOb84IXDpt0LZ95jsWQW43
kNUzDAPm3BJ6ilGY504+vL42BJ/vZVbzP43A+P7LMAqhGwIZQNrr3mHYRetP
46/LBuEb7b23Pv+CscwAjyvrZINw94fX77K7vti/j5d9fX37oSmNfVBT4y52
xTG/26inBygeqHB4yOGB7xXLeoR7DySLxNrSFBuDYNx6eIFED/R3m2XEqNvB
Cxe5M7YB3WCboaYyx+wNBXT+taO6XSD/DULp34fDtlO7ngZdB6R8kSLEi/0A
VR34qLDXDBSVUaVHxNOBQxYuqf9sBkMi5ZVnkhlgYUETu+vQDF6ZM8ynozLh
YdeXwRt7TYA/XUQ/lJANvjV6E5JUTZA4o3XoZU4+0LDLi/73sh7sPn+Z8Gz8
BV4BGm9c+qog4VxF/NVbGAz1mGtR21dBy+8N4/lmDGI8G82BuQqYttPNk56W
gb3BBYGEu5VgIco0d+zlb0CrzExbPeXAGzI21mJdAZ8EMigrdjHwMXPqMHL+
A78ogjNF5PLAo44sb+zXH5i67WvomJwLzsLOX59s/4EoMZd+B7pcsF12vmVh
XQPa4hx3Xw1lg9Eb19oPj//CMO29oyIemXDB0/1XpHIdKNVQ3ZSd/w5Cs0ci
uNzrIJz5093cxkTgU/N4m1hRB1Z5DVE2WQnAQu8plS5TD5KRjd/W7OOAPNQr
+6dIA+g+/GogJxMJOyRqv2vPGkBgSzjiF2M4bOh5m1d9b4C9wK0U6qVQmOX4
JNTA0Qi0ZzUpJTMCoS3pc2Ifwz8o9jss2BTjBY3UtB+Nbv4DRY4OQq+TG9Q8
93k45v0PdJnLDM89cYbyRlrZJzX/wKKM819IsgMYhNygsyFvguryByeqv1iD
7l/3/QKOJhDibhtioDQDbdKfhS18E7zhOBepT6sBd89TDVzVb4JjxQkzTZYq
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
XJWNuXAG/B8X5RJ0
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
gss5X9ly3Lz9MiI3WwOg7njTRi/uu0z+xF7lt8B5JJb+D3fmYYIFh3AwIOw5
u/fh949w9sWfC+R3cObPh/vyuG/cGL1mMxQKKi5Nnfq4455oF6X9CIfAuaiX
3rgvvoeIXQ5RoOXwVHIY97vsbOol3Y/w4tA1BW78+b8Y4ZQ/dzAG0GQ34yu4
yzbdU83WYyFk10EBFPeUN6rvPREHpUmn4zdx7+H+tze+Mx4OpfHKAV5vjySN
PdryE4EjYf+HGtwBhYkKc0lJcOZVvQE3Xr/5l/8sMocmg2yKzYkHuJnuqRsq
WKZCi4JiNxNe/2lvziAJUp9hp7PEohXeL6Sy6CLqyQzw+oxxD+C+t0o5++x0
Jpj/PJioivebT9YEz77oLKiwJE/L4v1I21ewqz8xG3qqkqyO4f37LGeq/q1w
Dlg3LF/I+V9/XzsccCE1B0o0q5TPueF5wdmTJTk9F6KQovbb+DxImtBgNM3J
gw3rY8dy8fnR7Ob949CpfBjm4mtW98Lv96Fix8a8fEB8H5ou4ta5eWTjZOE3
YJZf1EfwecReNL+4jhXCsDNVag2fX7b+b0a960og99FszhQ+HxOFfybIq6HA
kn+bNy8Yz1c/lg2mG1HYuLHS6BxCB+71DLOUpxik398kHw6lg/lx7ilW0x9A
2SsqZY3n+aPhw8NNlj+B2qnv6hCD398nzm36LpXQr7oiFZ2J59sahq/DJZUw
W3z0tVcWPj+PuQQ/Xq+Eo14aKs+/4PVGd1Ezt6yCZxL6Mko5dNC3c6t2fPQL
Kq4Tfy/m4fve27Pko0oNpPE4Kt7E831Lin9SD2c9tETlBxbi+62Ohc1dX7Ue
Fs30T0bgeb3KOMBw2LceCox5gq3r8HoNV+KwJjbAZTeuS8fw/H5TV/n361cN
QCI4N3jh+/Lc8H9K/iaNUDR0mmMS369n9/jI1vs2AtfjklMZ+D6WvVx9dFda
Izws/HjIDM/rUikqpHejjVCQhzJM4Hn9iPGVH1H3mkAzp0CpFM/rOxevyqff
aIZy/ascs8P4vuuSNrR53gzHnh3IDcbzABfG46sY3Aw/zN4GnPxfPvcb7upo
aYbLS/2hT/E8zve8mpiw1AzPu+2itnHza2WJmXG3gMnHU16BeP4QOWL/kqzV
AqfZ0n8k4vlEnMUgrsG2Bdbs5P6K4vlFck6pOjKiBR7eDolLxX2qaDevdHcL
mD1z9YnE88+ZuH/nN9dbQFN095udeF465/XnSdWBVvhs/6DzJW7FW58K7t5t
hcIbPrOX8bx1Se7tgKhjK+y0fhuciFv5sA3zUnQrcHhhx7ZxX6XoncCwVhjJ
uJx2E89vqlOK2r4DrbD1U3cpDrd6k4izJrENv55L61O4Nb+xpfILtsFqjWrK
CTwfan9cbJi60AYOec1j5rh13bpW8x+0ga6/bGoa7ntPscOu7m2wL3K8tQ+3
gVqS8vWkNqhlenZnJ55XH8n6me+rbAPCg8tCsrifHHgePvy3DY4f2SOojduY
qIVlMrUDetyRZo3bfExh7KVoO7joyz/0x/2iTpDjsko7FFE53D7its5lPrPr
WTt8sGj2TMVt9372Xo9vOyCPjfX+l8/tnVo9k9PbgSuviZ6O2+nR98znv9sB
S2aXTsTtejW2XWGmHUz8aaxhuD2kPbeZ2DvAU97/qQtuHx4T4ZbjHdDmc07B
CLf/lrpqtFoHMHXEmP/v/SJw+IzNU4sOCHcRmD+AO6SaL/pUUAewPKNlTuPX
H5ZFqiTkdECQuce7fNzvQydmapo7YG06Nugl7o/2Ddxhix2weOp6iCzuWIM8
msGeTkhku+c1id//BOWoR8dkOyFQAtWNwP2J63HeT5tO4Ajwv/sHf54Za9f6
AsI7QUFM+bEN7ux+GYpOQSdYfJ5kYcL9LX1bY26tE7gYIlo48XopChp5/X1/
F8S/KOjww+sLta1J9DjXBSPrc8e38fqruBi2dMChCyZz/gXV4vX6S+z1wbGP
XZBoVWgvjLuWw/BSDtoFDbeeW73E67u5R/LdfwzdUK07oMaE13+/ZcVJa7du
kBZYGviB5+eeKjJvSkI3JBw/UPwHf9/tOHBpu7OsG47+x/FiCX8fbij7+UuB
3ANqR/JlmPB8jXH9uEv26AGOtQMmv/D+LXpMuHg6qQeIxmsuCXh/fysC0ScV
PVD96/W2Nd7/WQ9KFmopvaBeWbbIgOfr6NzvXiGevcAt1XAjoxG/30zrJhXJ
vVDzxurgBXyehOrK3Vyt7IVPJxuG6vB5E0AqOKjL1AcePorHavC87XArL1vQ
uw/29Kje1CjH59FiVk+2zx8QDnxqlIjPNx3luR/DaX+A/FPgaEIuHTSijidz
1/yBSfrfwxHZeF4TaD9TTO6HBEJRysMMfD5UazDyX+6HrSrdXs9EOhywXFo6
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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.575511187208104*^9, 3.575511223131051*^9}, {
   3.575511282618924*^9, 3.575511304711616*^9}, 3.575511344262142*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "+", 
        RowBox[{"1.1", "/", "2"}]}], ")"}], "*", "3"}], "]"}], "*", 
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", "x", ")"}], "2"]}], 
      RowBox[{"2", "*", ".6"}]], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.575511105743772*^9, 3.575511116660729*^9}, {
  3.575511360438957*^9, 3.575511441938421*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
zRI7QXEOYOJu5cD///82sWP1ebVGCgf+H1oGypE=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{-3, 3}, {-0.11448345857084503`, 0.8498301204412693}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.575511389609332*^9, 3.575511443079498*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nfac", "=", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sinc", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "+", 
           RowBox[{"1.1", "/", "2"}]}], ")"}], "*", "3"}], "]"}], "*", 
       RowBox[{"Exp", "[", 
        FractionBox[
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", "x", ")"}], "2"]}], 
         RowBox[{"2", "*", ".6"}]], "]"}]}], ")"}], "2"], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "6"}], ",", "6"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.575511456012261*^9, 3.575511473417803*^9}, {
  3.5755120067495*^9, 3.575512044889786*^9}}],

Cell[BoxData["0.5635339080322532`"], "Output",
 CellChangeTimes->{
  3.575511856416629*^9, {3.575512007772647*^9, 3.575512012178825*^9}, 
   3.575512045543926*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", "Nfac"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sinc", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "+", 
           RowBox[{"1.1", "/", "2"}]}], ")"}], "*", "3"}], "]"}], "*", 
       RowBox[{"Exp", "[", 
        FractionBox[
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", "x", ")"}], "2"]}], 
         RowBox[{"2", "*", ".6"}]], "]"}]}], ")"}], "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.575512058144419*^9, 3.575512065133203*^9}}],

Cell[BoxData["0.9999999999999998`"], "Output",
 CellChangeTimes->{3.575512065611721*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Now", ",", " ", 
   RowBox[{
   "calculate", " ", "the", " ", "tunneling", " ", "rate", " ", "in", " ", 
    "1", "D"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.575512075497338*^9, 3.575512095815182*^9}, {
  3.575512143035182*^9, 3.575512145047577*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KPlotAbs", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"Abs", "[", 
        RowBox[{"NIntegrate", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Conjugate", "[", 
            RowBox[{
             RowBox[{"W", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"W", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", "x", "]"}], "*", 
           RowBox[{"Exp", "[", 
            RowBox[{"\[ImaginaryI]", "*", 
             RowBox[{"(", 
              RowBox[{"2", "*", 
               FractionBox["\[Pi]", "12"], "*", "y", "*", 
               RowBox[{"(", 
                RowBox[{"x", "+", "1.1"}], ")"}]}], ")"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{
             RowBox[{"-", "12"}], "/", "2"}], ",", 
            RowBox[{"12", "/", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", ".1", ",", "12", ",", ".5"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.575512205170696*^9, 3.575512268903026*^9}, {
  3.575512661802139*^9, 3.575512668082408*^9}, {3.575512729487373*^9, 
  3.575512731071485*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(0.12828404777391322` \[VeryThinSpace]\\)\\) + \
\\(\\(0.007396811654735007`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(0.000013922112778433585`\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575512673777565*^9, 3.575512736648573*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(0.12034974556006539` \[VeryThinSpace]\\)\\) + \
\\(\\(0.04332857452106125`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(0.000013967823221829264`\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575512673777565*^9, 3.575512741643666*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({\\(-0.23456149968638856`\\)}\\)\[NoBreak]. NIntegrate \
obtained \[NoBreak]\\!\\(\\(\\(0.10194801212255554` \[VeryThinSpace]\\)\\) + \
\\(\\(0.0748882599833177`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \[NoBreak]\
\\!\\(0.00001407808506552825`\\)\[NoBreak] for the integral and error \
estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\
\", ButtonNote -> \\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575512673777565*^9, 3.575512746638033*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[\\(NIntegrate :: ncvb\\), \\\"MessageName\\\"]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575512673777565*^9, 3.575512746736225*^9}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000017`, 0.24, 0.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQPWsmCOy0ly8X/j696IC9MRg8tk/xrnuUGX/AHiL/
0d6Nz+inkCGM/9N+B9vhnIgL++3PngEBBofLmZELvblhfBaHc2KsXO2i+6B8
DofDnhNM9D/tgfJ5HFa3fkz/uWS3fRoYCDjINYfLyRrtgvKFHCSnO01xnrcD
yhdxMNKT2Vr6bhuUL+bgL9a8hUNjK5Qv4cD68NSKzoDNUL6Ug+eb53UrcjdC
+TIOR/yZXFy51kP5cg4R1W1J0Zarof5VcOD/32p1tHg5lK/ocClyEVvwkcVQ
vpLDg0khhr6mC6B8ZYeKYrFjCxfMhPJVHIS7OW/U20yG8lUdLiR9SauZ3QXl
qzk86Hs8Na2zHspXd1j/8EjfC/0MewCYVKCi
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{0, 11.6}, {0, 0.12849711956271734`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.23199999999999998`, 0.23199999999999998`}, {
   0.0025699423912543466`, 0.0025699423912543466`}}]], "Output",
 CellChangeTimes->{{3.575512231349455*^9, 3.57551224811621*^9}, 
   3.575512659312954*^9, 3.575512715009995*^9, 3.575512852382416*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KPlotAbs", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"Abs", "[", 
        RowBox[{"NIntegrate", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Conjugate", "[", 
            RowBox[{
             RowBox[{"W", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"W", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", "x", "]"}], "*", 
           RowBox[{"Exp", "[", 
            RowBox[{"\[ImaginaryI]", "*", 
             RowBox[{"(", 
              RowBox[{"2", "*", 
               FractionBox["\[Pi]", "12"], "*", "y", "*", 
               RowBox[{"(", 
                RowBox[{"x", "+", "1.1"}], ")"}]}], ")"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{
             RowBox[{"-", "12"}], "/", "2"}], ",", 
            RowBox[{"12", "/", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "1", ",", "20", ",", "2"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.575513015128712*^9, 3.575513023710203*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(0.10638204123945938` \[VeryThinSpace]\\)\\) + \
\\(\\(0.06908530536075566`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(0.000014050940171619023`\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513029433089*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({\\(-0.23456149968638856`\\)}\\)\[NoBreak]. NIntegrate \
obtained \[NoBreak]\\!\\(\\(\\(-0.017835497685145862`\\)\\) + \
\\(\\(0.11260890052457284`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(0.000015048452147554212`\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513034420745*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(-0.08782597843805226`\\)\\) + \
\\(\\(0.023532899996949262`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(8.434986000057954`*^-6\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513039142985*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[\\(NIntegrate :: ncvb\\), \\\"MessageName\\\"]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.57551303923748*^9}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000017`, 0.24, 0.6], 
    PointBox[{{1., 0.12684604099089136`}, {3., 0.11401258463446036`}, {5., 
     0.09092414349812504}, {7., 0.062118777100265636`}, {9., 
     0.0330233770037266}, {11., 0.008715543649266478}, {13., 
     0.007165578205521463}, {15., 0.013091322062218606`}, {17., 
     0.009772316289740134}, {19., 0.0002474054683764114}}]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{0, 19.}, {0, 0.12684604099089136`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.38, 0.38}, {0.002536920819817827, 
   0.002536920819817827}}]], "Output",
 CellChangeTimes->{3.575513076496802*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Now", ",", " ", 
   RowBox[{
   "test", " ", "out", " ", "my", " ", "crappier", " ", "function"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.575513135167677*^9, 3.575513142284365*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Wc1", "[", "x_", "]"}], ":=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", "Nfac", "]"}]], 
   RowBox[{"Sinc", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"1.1", "/", "2"}]}], ")"}], "*", "3"}], "]"}], "*", 
   RowBox[{"Exp", "[", 
    FractionBox[
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", "x", ")"}], "2"]}], 
     RowBox[{"2", "*", ".6"}]], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.575513154129952*^9, 3.575513204424435*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Wc2", "[", "x_", "]"}], ":=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", "Nfac", "]"}]], 
   RowBox[{"Sinc", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", 
       RowBox[{"1.1", "/", "2"}]}], ")"}], "*", "3"}], "]"}], "*", 
   RowBox[{"Exp", "[", 
    FractionBox[
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", "x", ")"}], "2"]}], 
     RowBox[{"2", "*", ".6"}]], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.575513219888357*^9, 3.575513224085729*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p2", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"Abs", "[", 
        RowBox[{"NIntegrate", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"Wc2", "[", "x", "]"}], "]"}], "*", 
           RowBox[{"Abs", "[", 
            RowBox[{"Wc1", "[", "x", "]"}], "]"}], "*", 
           RowBox[{"Exp", "[", 
            RowBox[{"\[ImaginaryI]", "*", 
             RowBox[{"(", 
              RowBox[{"2", "*", 
               FractionBox["\[Pi]", "12"], "*", "y", "*", 
               RowBox[{"(", 
                RowBox[{"x", "+", "1.1"}], ")"}]}], ")"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{
             RowBox[{"-", "12"}], "/", "2"}], ",", 
            RowBox[{"12", "/", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "1", ",", "30", ",", "2"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.575513147961682*^9, 3.575513150320459*^9}, {
  3.575513228666653*^9, 3.575513285201993*^9}, {3.575513323672597*^9, 
  3.575513329403993*^9}, {3.575513781234751*^9, 3.575513793156191*^9}, {
  3.575513919274853*^9, 3.575513930964142*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.5154385003136115`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(0.38354681155382614` \[VeryThinSpace]\\)\\) + \
\\(\\(0.24907821176974937`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(9.682310624431838`*^-6\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513795868069*^9, 3.575513932950691*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.5154385003136115`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(-0.059335300638980286`\\)\\) + \
\\(\\(0.3746283442830606`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \[NoBreak]\
\\!\\(0.000011584229183634164`\\)\[NoBreak] for the integral and error \
estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\
\", ButtonNote -> \\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513795868069*^9, 3.575513934084014*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.5154385003136115`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(-0.2644582547123288`\\)\\) + \
\\(\\(0.0708613757819126`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \[NoBreak]\
\\!\\(9.006648258442716`*^-6\\)\[NoBreak] for the integral and error \
estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\
\", ButtonNote -> \\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513795868069*^9, 3.575513935183255*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[\\(NIntegrate :: ncvb\\), \\\"MessageName\\\"]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513795868069*^9, 3.575513935269528*^9}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000017`, 0.24, 0.6], 
    PointBox[{{1., 0.4573271391810487}, {3., 0.3792981337183002}, {5., 
     0.2737873318164966}, {7., 0.19696752109548465`}, {9., 
     0.16785174224492133`}, {11., 0.1645027121877119}, {13., 
     0.15359027886116788`}, {15., 0.12013301936766735`}, {17., 
     0.07222964397277694}, {19., 0.02614030908312835}, {21., 
     0.00715010214727264}, {23., 0.024706394290695637`}, {25., 
     0.028677324343280172`}, {27., 0.02327974176657171}, {29., 
     0.013092396051270317`}}]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{{0, 29.}, {0, 0.4573271391810487}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.58, 0.58}, {0.009146542783620974, 
   0.009146542783620974}}]], "Output",
 CellChangeTimes->{{3.575513257185877*^9, 3.575513287670685*^9}, 
   3.575513330686145*^9, 3.575513840400018*^9, 3.57551394810421*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KPlotAbs", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"Abs", "[", 
        RowBox[{"NIntegrate", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Conjugate", "[", 
            RowBox[{
             RowBox[{"W", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}], "]"}], "*", 
           RowBox[{
            RowBox[{"W", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", "x", "]"}], "*", 
           RowBox[{"Exp", "[", 
            RowBox[{"\[ImaginaryI]", "*", 
             RowBox[{"(", 
              RowBox[{"2", "*", 
               FractionBox["\[Pi]", "12"], "*", "y", "*", 
               RowBox[{"(", 
                RowBox[{"x", "+", "1.1"}], ")"}]}], ")"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{
             RowBox[{"-", "12"}], "/", "2"}], ",", 
            RowBox[{"12", "/", "2"}]}], "}"}]}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "10"}], ",", "20", ",", "2"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.575513349645256*^9, 3.575513350973823*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25771925015680575`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(0.017320356316367917` \[VeryThinSpace]\\)\\) + \
\\(\\(0.009999912381715229`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(2.9660512174207`*^-6\\)\[NoBreak] for the integral and error \
estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\
\", ButtonNote -> \\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513358134646*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(-0.004940807147174364`\\)\\) + \
\\(\\(0.04700863989624465`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(8.457229559649071`*^-6\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513362955675*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NIntegrate", "::", "ncvb"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"NIntegrate failed to converge to prescribed accuracy after \
\[NoBreak]\\!\\(9\\)\[NoBreak] recursive bisections in \[NoBreak]\\!\\(x\\)\
\[NoBreak] near \[NoBreak]\\!\\({x}\\)\[NoBreak] = \
\[NoBreak]\\!\\({0.25762600031361144`}\\)\[NoBreak]. NIntegrate obtained \
\[NoBreak]\\!\\(\\(\\(-0.07313933029391163`\\)\\) + \
\\(\\(0.023764408981775977`\\\\ \[ImaginaryI]\\)\\)\\)\[NoBreak] and \
\[NoBreak]\\!\\(8.441226950749354`*^-6\\)\[NoBreak] for the integral and \
error estimates. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NIntegrate/ncvb\\\", ButtonNote -> \
\\\"NIntegrate::ncvb\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513367489846*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[\\(NIntegrate :: ncvb\\), \\\"MessageName\\\"]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.575513367571826*^9}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000017`, 0.24, 0.6], 
    PointBox[{{-10., 0.019999824763430492`}, {-8., 0.04726757662669384}, {-6.,
      0.0769032429101336}, {-4., 0.10350158670279767`}, {-2., 
     0.12192829755257015`}, {0., 0.1285138691664875}, {2., 
     0.12192829755257015`}, {4., 0.10350158670279767`}, {6., 
     0.0769032429101336}, {8., 0.04726757662669384}, {10., 
     0.019999824763430492`}, {12., 0.0004277362673209204}, {14., 
     0.011378517693718459`}, {16., 0.012463528772552456`}, {18., 
     0.005389227065716059}, {20., 0.006662418265149693}}]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  Method->{},
  PlotRange->{{-10., 20.}, {0, 0.1285138691664875}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.6, 0.6}, {0.00257027738332975, 
   0.00257027738332975}}]], "Output",
 CellChangeTimes->{3.575513427340425*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Wc1", "[", "x", "]"}], ",", 
     RowBox[{
      RowBox[{"W", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.57551367324176*^9, 3.575513755169067*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
/Mmw5w7nhO6FJ0+AJ5tC6F4oT7R8MKyrplk8FP6WQvRkD36aKGrTJW1mCM8S
CiGvd4/Z9XVt8WalkIStFRTiwrW9P9C4vTh8hmtk5AuFcKCZLW1t6Sk+HKGc
eLaGQuSFP5ponBkr7sg9++/wXwrxME46UOTGYjEjS+0DpRUK4aETfD7zHQ1p
4e4COxmphI+y59szXSy4fp3gXX0qlZDYBF3fWdchH9vJqFPsVELNqXKAbS8b
ynP2+ceIU4nNti2HNC9x4pbY8KWkjVRif9/UlurtXKjOreSVJUMlxF9WzG9+
w4VavG6XS7ZQCYrshOnZVG40FVw8O6VDJWY6ephFT/Ci2f3kjrU9VOKq42uF
C2W8aCUMpzbspxK26xh/SCrwoZ1o6DEZUyrRnTVzaXyEDz0kOYwsT1OJz/7t
XxgsBdDn8euKs3Z0fto/xiKzBdB/o5me23k6Xk5/XbYigOHS97VuuVIJRf5P
jVZJgpgst0nlkz+VaAmyY5z5JIRpWeXPPwdTCS63Te/JVSHMUHCQq79JJaY3
3dxwDYTxlVKO1L9oKlEZU2df8lEY83JMUxbuUInxgGJZ+xlh/LBlQpiWSO8H
zZbGqSKCpao7eCVT6f7ixMiDByL4+XVzjFI6lShV3r81vEoEq7b6btiZSSXi
qdncSSsi2KhBUo+8on8/Y3DV+Lgo/smzCz6VSyWuSVjkTd8QxY7t1DXH91Qi
eH0w199XojioaTwfjFSi/tXsSPSqKI5+GHGPKaMSdyyiXtlKi+HkrpiJpM9U
IqZ9ljtmvxgua9UP5f2kEq6nRGN5w8WQscjToaSOSsjtVLtyLUMMabrCPT+a
qITvnuHAQ2ViyEWcbuv7SyUaJu6yesyLIX8Jw/GpbioxYJ72o5pLHEX00hvX
+qnEh5E3lu/kxFGibJ/ZhhEqcU5TKFNFRxyl9Qd+Co1TibV7Ci+II+IoXxFx
QGaaShj2HTwwcVYclfdv+bp1nko8seS02u8hjls//9ynu0wlGNwV7+27IY47
DK+UGjPQiC12jwqm74rjLXW2MW4KjZA/1G/h/1gcW8Weiraw0IhLzzZWjGSL
oyqLjuFjNhpxW6M4XD9fHIMnGtwdOGmE3shWwQgUx4Y/rmkqvDQiT4upteQz
nU8lS/WMAI3g1/2lOV4tjr6vHy8WitAIZxWnQOEGcax+uEsuVIJGZA7/YND7
LY4bb9SamWyiEesfwcLFdnF0v+QcyCNLI7Tdj6SmdYrjZ2vKixYFGsERMCHe
2U3vj35Ky+MtNGLgqec9tV5xvKiyg3ZhK40wff1CNJ6OSaGf6qrbacQfj75P
nHTMx3zhzOxOGkHwMV7LpPs7/GOIKtKmESpGvnvP0ON/bHrwIZSgEax/r7Nr
0fNzlKr3mujTiLOqQ/m6dH62Od+5eQ1pBOcnB0FXOv+8BHvd3yY0IrDx8nLV
T3FkCVpxSjtEI0incwpnvorjceeExAtmdPwl2lK+VBxfWKiWq1rSiI4YzR3K
H8WRgfgyPnuc3s//8pxc34ijmaKtePFpej/APXYyUxwz+BaNbtjRCPYVtl2F
KeJ4YFApndeJRiT4bpNXCRPH1Lryn78v0ojQI9tt23zEcbLo1HLaZRpRwcPG
1HFRHO/fibFQ86YRoz+vzo7Qz8ewn3zwnB9d3yf/xlb0xFHXoeRlcSCNYOGW
S7mkIY49WlMsB8NphGBV0FwQjziq9R776JhII6osf/R//CqGIT/H+tSSaERn
JmVFIV8MGwvCeecf0f1LZdN4noihX/RHl5sZNELs6HOrk15i+FVTQjL9HY2I
qbcf3igphmKb3ps4FdAIZcHd4i9ZxNBtw2GvrUU0gmLTFvhtTBQFOoN+YTmN
mJQko4qLRdEuojektY5GHA8iX7daiuJia84A/ySNOPK6+aSEtwjqu3yJPThL
I/xdO+IvW4ng7aXunTcWacTaVXV/J00RlBIRvTXNxELUni30tp4WRgPLWwp1
vCyEWcphBX8nYYz/dc4pdjsLwfyHv8DUWAhVKiVG1nuzEJ8O9XwxGuRHL4vd
8XrXWYiv2hFSdqX8WNJjoe0TxEIoMzjWuiTxoznz7ajBWyzEva+XbWwO8qMv
saT85SEL4Qlv+Mdf8+GXj00XbxSyEJdknnILevEij/EUfxHJQhSpfAgXPsKL
J1s4iqfLWYhMHVllOUVeHJvbx2H/g4W4RYjKOrbyoMD2vJd67SyEZLLLf8/3
8KBN+c9jPl0sxLpWHzcFUR58Zja8+qaPhVBVfspTNM2N2lc2Hdo4xkLcvLhn
m1wWN95k1J2zmmIhtNsGf64FcWNNrHVq7BwLcXBQ13fiBDeKSHkYfFliIcqT
/21b2c6N////bWLmRNKMNBc3/h+kUuel
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
SQVZPd4GstyWwOsTKeWTaH35RKLEFoqc/VDD4fT3k2gqqfnOuhGz3Hdp8WuZ
MZNIo13mdWwLVU7lRcyrnJeT6J0uZURDY7Mc9ykHepHtJBK+q86zFM4i5+33
U6LMZBJtSmHelG3KJjf1Xc2yUnsSnfhQ6rLMv12u1oevp1ZyEsnplJcXnmaX
O9b/gq1RYBJ1hfRcf3KNQy5cbFmpec8kehKeQrMP2Cl3t/dTTvvyBHrw2jov
Q3iPXI/omb+dIxNI+aN4HVP4XjmFJ8n7e75OICXrDO0UTi653cKu/t8rJtCi
dFCJvzGPnIf736qBzAm0LYT4WkfogNzIZ+2lodgJ5KcrWFDmfVCu0kXo1ujj
CfTnr2yoagifnGD76zcT9ydQ1n3djfacQ3JB/MSO6ZsTyEJ5M/+bH4flzFq/
0JbOTaCbXZyTD+4dkWvjU3RYPTWBQn6Vxt3+LCgn45iZTj8ygX44Rx7RVROS
23bw6V7KlglUyJ7vb+8sKvfIfkpj0+o4Ere/4zQkeVxuqPHa061j4yhcslvO
yktMrtj25MyO1nF08fiVsiK3k3J89dGCu9A4eqaWavs7UFzuOddmw73Z4yiC
VHiNLVdCzqjmR/P+oHFkaMvXePuwlJwyLN369ngcSXDOk4tDpOWOFW0nRNmO
I/tIfe0wLhm5tbSzEpwXxxGo/5WptgS5X4f1W7/Ij6N/ObAr+LSc3IeY++ah
YuPo/VEJy41AebnwoLdRHNvHke6S/NrJRAU5d5byUx0bY0hPvT6vsFZRzsy7
sy1wcgwJ3NDLCJlXkpN4RKGwfRpD3FNL1V3+ynL75nhiWyrH0M3nH1TYZlXk
SNanTvtnjqHtK0nF6taqcm3Gt+9uChhDL7Ye+URK+k+u6Ks7tcF1DIn+qviS
YaIpF3M5PP7p3TEkqJF41jhKS87qQlMX6b8xdLt43To44pKcds3AvSrZMbSg
n86z5b22nAysbPYQGUPHEuY6L3/Skdt0Qpi2vnUMmWZ3qhgq6spNpin2lK2O
oi8cW9nTQ/Xkug9fv/9odBT5q/aE/F39H8PVHc/1G8S/JEkSkp+I7JBVEcnz
vW9IdiVKdlLSIoSksjJLyMyeWdmb+shKVvbee+/x9bV+/rzXc8/dvd/P3T13
9yGe+XPiZu0stnt+aTVvXw+8/RMI+cWz2F8Pcdoz0QZgSfOrxzrl4D6rujPd
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
Qv6nWTUmSqTzFhlcAWvFPf26xSpsvW19VdZjBeiEfP0mtyuxpNKwcO/eZVBa
zSGeZazA2iIfy5t4LMHrQ5ufOT1/YdojdBLWx+dAfh37LnriF+ahuGh+6fcs
MEx6/EaBP7GH4lTvX7+ehfRalvX7MaVY0tAJFo/BGZjww+v5FxVjlcnurTTF
06DN4SZ4aCYf68iWO/TecxJs7QV9/gamY87y8SuhgaOgvrDUkZH4A1vLjDPX
0RsFPuOCs0EFaRgqy29K4B6FdiX5LOPuFGzMPPlOb84IXDpt0LZ95jsWQW43
kNUzDAPm3BJ6ilGY504+vL42BJ/vZVbzP43A+P7LMAqhGwIZQNrr3mHYRetP
46/LBuEb7b23Pv+CscwAjyvrZINw94fX77K7vti/j5d9fX37oSmNfVBT4y52
xTG/26inBygeqHB4yOGB7xXLeoR7DySLxNrSFBuDYNx6eIFED/R3m2XEqNvB
Cxe5M7YB3WCboaYyx+wNBXT+taO6XSD/DULp34fDtlO7ngZdB6R8kSLEi/0A
VR34qLDXDBSVUaVHxNOBQxYuqf9sBkMi5ZVnkhlgYUETu+vQDF6ZM8ynozLh
YdeXwRt7TYA/XUQ/lJANvjV6E5JUTZA4o3XoZU4+0LDLi/73sh7sPn+Z8Gz8
BV4BGm9c+qog4VxF/NVbGAz1mGtR21dBy+8N4/lmDGI8G82BuQqYttPNk56W
gb3BBYGEu5VgIco0d+zlb0CrzExbPeXAGzI21mJdAZ8EMigrdjHwMXPqMHL+
A78ogjNF5PLAo44sb+zXH5i67WvomJwLzsLOX59s/4EoMZd+B7pcsF12vmVh
XQPa4hx3Xw1lg9Eb19oPj//CMO29oyIemXDB0/1XpHIdKNVQ3ZSd/w5Cs0ci
uNzrIJz5093cxkTgU/N4m1hRB1Z5DVE2WQnAQu8plS5TD5KRjd/W7OOAPNQr
+6dIA+g+/GogJxMJOyRqv2vPGkBgSzjiF2M4bOh5m1d9b4C9wK0U6qVQmOX4
JNTA0Qi0ZzUpJTMCoS3pc2Ifwz8o9jss2BTjBY3UtB+Nbv4DRY4OQq+TG9Q8
93k45v0PdJnLDM89cYbyRlrZJzX/wKKM819IsgMYhNygsyFvguryByeqv1iD
7l/3/QKOJhDibhtioDQDbdKfhS18E7zhOBepT6sBd89TDVzVb4JjxQkzTZYq
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
XJWNuXAG/B8X5RJ0
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.575513730889821*^9, 3.57551375587616*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions:", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.572127540901985*^9, 3.572127543317565*^9}}],

Cell["\[LineSeparator]", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.570215010839119*^9, 3.5702150226415195`*^9}, {
  3.572127572005554*^9, 3.572127573157775*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[CapitalPsi]", "[", 
   RowBox[{"n_", ",", "x_", ",", "m_", ",", "y_", ",", "L_"}], "]"}], ":=", 
  " ", 
  RowBox[{
   FractionBox["1", "L"], "*", 
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"-", "\[ImaginaryI]"}], "*", "2", 
     FractionBox["\[Pi]", "L"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"n", "*", "x"}], "+", 
       RowBox[{"y", "*", "m"}]}], ")"}]}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5702150251058083`*^9, 3.5702151013501663`*^9}, {
  3.5702151520355673`*^9, 3.5702151802910624`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Hp", "[", 
   RowBox[{
   "n_", ",", "x_", ",", "m_", ",", "y_", ",", "L_", ",", "\[CapitalPhi]_", 
    ",", "V_", ",", "c_", ",", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"-", "1"}], "2"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"\[CapitalPhi]", "[", 
             RowBox[{"n", ",", "q", ",", "m", ",", "y", ",", "L"}], "]"}], 
            ",", "q"}], "]"}], ",", "q"}], "]"}], "+", 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"\[CapitalPhi]", "[", 
             RowBox[{"n", ",", "x", ",", "m", ",", "w", ",", "L"}], "]"}], 
            ",", "w"}], "]"}], ",", "w"}], "]"}]}], ")"}]}], "-", 
     RowBox[{"V", "*", 
      RowBox[{"Exp", "[", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "2"}], 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"x", "-", "b"}], ")"}], "2"], "+", 
           SuperscriptBox["y", "2"]}], ")"}]}], 
        SuperscriptBox["c", "2"]], "]"}], 
      RowBox[{"\[CapitalPhi]", "[", 
       RowBox[{"n", ",", "x", ",", "m", ",", "y", ",", "L"}], "]"}]}]}], 
    ")"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"q", "\[Rule]", "x"}], ",", 
     RowBox[{"w", "\[Rule]", "y"}]}], "}"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.570215184883725*^9, 3.570215228654123*^9}, {
  3.5702153656843147`*^9, 3.570215463928651*^9}, {3.570215779092273*^9, 
  3.5702157938471527`*^9}, {3.570218779153079*^9, 3.5702188635205073`*^9}, {
  3.5702269284039097`*^9, 3.5702269306252174`*^9}, {3.5709307596086063`*^9, 
  3.5709307707939215`*^9}, {3.570931186897369*^9, 3.570931197833276*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"H2p", "[", 
   RowBox[{
   "n_", ",", "x_", ",", "m_", ",", "y_", ",", "L_", ",", "\[CapitalPhi]_", 
    ",", "V_", ",", "c_", ",", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"-", "1"}], "2"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"\[CapitalPhi]", "[", 
             RowBox[{"n", ",", "q", ",", "m", ",", "y", ",", "L"}], "]"}], 
            ",", "q"}], "]"}], ",", "q"}], "]"}], "+", 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"\[CapitalPhi]", "[", 
             RowBox[{"n", ",", "x", ",", "m", ",", "w", ",", "L"}], "]"}], 
            ",", "w"}], "]"}], ",", "w"}], "]"}]}], ")"}]}], "-", 
     RowBox[{"V", "*", 
      RowBox[{"Exp", "[", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "2"}], 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"x", "+", "b"}], ")"}], "2"], "+", 
           SuperscriptBox["y", "2"]}], ")"}]}], 
        SuperscriptBox["c", "2"]], "]"}], 
      RowBox[{"\[CapitalPhi]", "[", 
       RowBox[{"n", ",", "x", ",", "m", ",", "y", ",", "L"}], "]"}]}], "-", 
     RowBox[{"V", "*", 
      RowBox[{"Exp", "[", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "2"}], 
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"x", "-", "b"}], ")"}], "2"], "+", 
           SuperscriptBox["y", "2"]}], ")"}]}], 
        SuperscriptBox["c", "2"]], "]"}], 
      RowBox[{"\[CapitalPhi]", "[", 
       RowBox[{"n", ",", "x", ",", "m", ",", "y", ",", "L"}], "]"}]}]}], 
    ")"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"q", "\[Rule]", "x"}], ",", 
     RowBox[{"w", "\[Rule]", "y"}]}], "}"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5702154106369686`*^9, 3.5702154108509626`*^9}, {
   3.5702154668880014`*^9, 3.570215485975391*^9}, 3.5702155610089054`*^9, {
   3.570218870051346*^9, 3.570218903945597*^9}, {3.5709307108269043`*^9, 
   3.570930774381958*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HPlane", "[", 
   RowBox[{"V_", ",", "L_", ",", "n_", ",", "m_", ",", "l_", ",", "q_"}], 
   "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"n", ",", "l"}], "]"}], "*", 
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"m", ",", "q"}], "]"}], "*", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "*", 
       FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["n", "2"], "+", 
       SuperscriptBox["m", "2"]}], ")"}], "2"]}], "-", " ", 
   RowBox[{"V", "*", 
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", "*", 
           FractionBox["\[Pi]", "L"]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"n", "-", "l"}], ")"}], "2"]}], "8"], "]"}], "*", "\[Pi]", 
    "*", 
    FractionBox["1", 
     RowBox[{"2", "*", 
      SuperscriptBox["L", "2"]}]], 
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", "*", 
           FractionBox["\[Pi]", "L"]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"m", "-", "q"}], ")"}], "2"]}], "8"], "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.570219192838127*^9, 3.570219197234665*^9}, {
  3.5702192436695185`*^9, 3.5702192900733156`*^9}, {3.570219442121977*^9, 
  3.5702194661109934`*^9}, {3.5702195202318*^9, 3.5702195321232705`*^9}, {
  3.570219576136772*^9, 3.570219634658684*^9}, {3.5702266841284084`*^9, 
  3.5702266845615516`*^9}, {3.5702267770386944`*^9, 3.570226779349032*^9}, {
  3.5702270814494915`*^9, 3.5702270844568915`*^9}, {3.570227414095292*^9, 
  3.570227435630989*^9}, {3.5709312774251366`*^9, 3.5709312862704563`*^9}, {
  3.5709884254526167`*^9, 3.570988425836464*^9}, {3.570988497677177*^9, 
  3.570988498140882*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HPlanebtest", "[", 
   RowBox[{
   "V_", ",", "L_", ",", "n_", ",", "m_", ",", "l_", ",", "q_", ",", "b_"}], 
   "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "I", " ", "had", " ", "some", " ", "trouble", " ", "getting", " ", "the", 
     " ", "factors", " ", "in", " ", "EXp", " ", "right"}], ",", " ", 
    RowBox[{"but", " ", "this", " ", "configuration", " ", 
     RowBox[{"worked", ".", " ", "This"}], " ", "is", " ", "for", " ", "one", 
     " ", "well", " ", 
     RowBox[{"only", "!"}], " ", "This", " ", "is", " ", "the", " ", 
     "generalizating", " ", "of", " ", "HPlane"}], ",", " ", 
    RowBox[{"which", " ", 
     RowBox[{"doesn", "'"}], "t", " ", "worry", " ", "about", " ", 
     RowBox[{"b", ".", " ", "This"}], " ", "basically", " ", "lets", " ", 
     "me", " ", "offset", " ", "my", " ", "one", " ", "well", " ", "wherever",
      " ", "I", " ", "want", " ", "to", " ", "double", " ", "check", " ", 
     "that", " ", "I", " ", "have", " ", "the", " ", "right", " ", "form", 
     " ", "of", " ", "the", " ", "analytics"}]}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"n", ",", "l"}], "]"}], "*", 
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"m", ",", "q"}], "]"}], "*", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "*", 
       FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["n", "2"], "+", 
       SuperscriptBox["m", "2"]}], ")"}], "2"]}], "-", " ", 
   RowBox[{"V", "*", 
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", "b"}], "+", 
          RowBox[{"\[ImaginaryI]", 
           RowBox[{"(", 
            RowBox[{"2", "*", 
             FractionBox["\[Pi]", "L"]}], ")"}], 
           FractionBox[
            RowBox[{"(", 
             RowBox[{"n", "-", "l"}], ")"}], "2"]}]}], ")"}], "2"], "-", 
       RowBox[{"4", 
        SuperscriptBox["b", "2"]}]}], "2"], "]"}], "*", "\[Pi]", "*", 
    FractionBox["1", 
     RowBox[{"2", "*", 
      SuperscriptBox["L", "2"]}]], 
    RowBox[{"Exp", "[", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\[ImaginaryI]", 
         RowBox[{"(", 
          RowBox[{"2", "*", 
           FractionBox["\[Pi]", "L"]}], ")"}], 
         RowBox[{"(", 
          RowBox[{"m", "-", "q"}], ")"}]}], ")"}], "2"], "8"], 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.57093125165367*^9, 3.5709312898272624`*^9}, {
   3.570931341167391*^9, 3.5709313441782713`*^9}, {3.570932250439*^9, 
   3.5709322589567027`*^9}, {3.5709323074822006`*^9, 3.570932308387007*^9}, 
   3.570932577634177*^9, {3.5709335178890133`*^9, 3.57093352824736*^9}, {
   3.5709883475675707`*^9, 3.570988361948283*^9}, {3.5721278186849003`*^9, 
   3.572127906953497*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"H2Plane", "[", 
   RowBox[{
   "V_", ",", "L_", ",", "b_", ",", "n_", ",", "m_", ",", "l_", ",", "q_"}], 
   "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"KroneckerDelta", "[", 
      RowBox[{"n", ",", "l"}], "]"}], "*", 
     RowBox[{"KroneckerDelta", "[", 
      RowBox[{"m", ",", "q"}], "]"}], "*", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "*", 
        FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
     FractionBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["n", "2"], "+", 
        SuperscriptBox["m", "2"]}], ")"}], "2"]}], "-", " ", 
    RowBox[{"V", "*", 
     RowBox[{"Exp", "[", 
      FractionBox[
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "b"}], "+", 
           RowBox[{"\[ImaginaryI]", 
            RowBox[{"(", 
             RowBox[{"2", "*", 
              FractionBox["\[Pi]", "L"]}], ")"}], 
            FractionBox[
             RowBox[{"(", 
              RowBox[{"n", "-", "l"}], ")"}], "2"]}]}], ")"}], "2"], "-", 
        RowBox[{"4", 
         SuperscriptBox["b", "2"]}]}], "2"], "]"}], "*", "\[Pi]", "*", 
     FractionBox["1", 
      RowBox[{"2", "*", 
       SuperscriptBox["L", "2"]}]], 
     RowBox[{"Exp", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"\[ImaginaryI]", "*", 
          RowBox[{"(", 
           RowBox[{"2", "*", 
            FractionBox["\[Pi]", "L"]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"m", "-", "q"}], ")"}]}], ")"}], "2"], "8"], "]"}]}], "-", 
    RowBox[{"V", "*", 
     RowBox[{"Exp", "[", 
      FractionBox[
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "2"}], "b"}], "+", 
           RowBox[{"\[ImaginaryI]", 
            RowBox[{"(", 
             RowBox[{"2", "*", 
              FractionBox["\[Pi]", "L"]}], ")"}], 
            FractionBox[
             RowBox[{"(", 
              RowBox[{"n", "-", "l"}], ")"}], "2"]}]}], ")"}], "2"], "-", 
        RowBox[{"4", 
         SuperscriptBox["b", "2"]}]}], "2"], "]"}], "*", "\[Pi]", "*", 
     FractionBox["1", 
      RowBox[{"2", "*", 
       SuperscriptBox["L", "2"]}]], 
     RowBox[{"Exp", "[", 
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"\[ImaginaryI]", "*", 
          RowBox[{"(", 
           RowBox[{"2", "*", 
            FractionBox["\[Pi]", "L"]}], ")"}], 
          RowBox[{"(", 
           RowBox[{"m", "-", "q"}], ")"}]}], ")"}], "2"], "8"], "]"}]}]}], "//",
    "N"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.570680082568841*^9, {3.5706801506789513`*^9, 3.5706802608984394`*^9}, {
   3.5706814558960094`*^9, 3.5706814689845357`*^9}, {3.5709335633165245`*^9, 
   3.5709335716938066`*^9}, {3.5709338675326557`*^9, 3.570933869451476*^9}, {
   3.570988352349019*^9, 3.570988358289434*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HMatrix", "[", 
   RowBox[{"V_", ",", "L_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"ArrayFlatten", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"HPlane", "[", 
       RowBox[{"V", ",", "L", ",", "m", ",", "l", ",", "n", ",", "q"}], "]"}],
       ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", 
        RowBox[{"-", "size"}], ",", "size"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"-", "size"}], ",", "size"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", 
        RowBox[{"-", "size"}], ",", "size"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"q", ",", 
        RowBox[{"-", "size"}], ",", "size"}], "}"}]}], "]"}], "//", "N"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.572128069191348*^9, 3.5721280745519753`*^9}, {
  3.5721281434915953`*^9, 3.572128143907481*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"groundState", "[", 
   RowBox[{"EM_", ",", "L_", ",", "x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Size", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Length", "[", "EM", "]"}], "]"}]}], ",", " ", "i", ",", 
      "j"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Given", " ", "an", " ", "eigenvector"}], ",", " ", 
      RowBox[{
      "this", " ", "will", " ", "compute", " ", "a", " ", "plottable", " ", 
       "version", " ", "of", " ", "the", " ", 
       RowBox[{"wavefunction", ".", " ", "However"}]}], ",", " ", 
      RowBox[{"there", " ", "is", " ", "little", " ", "sophistication"}], ",",
       " ", 
      RowBox[{
      "the", " ", "user", " ", "must", " ", "still", " ", "change", " ", 
       "the", " ", "index", " ", "conversion", " ", "number", " ", "by", " ", 
       RowBox[{"hand", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Note", ":", " ", 
         RowBox[{"there", " ", "was", " ", "a", " ", "problem"}], ":", " ", 
         RowBox[{
         "use", " ", "ky", " ", "for", " ", "calculating", " ", "the", " ", 
          "number", " ", "on", " ", "x", " ", "and", " ", "y"}]}]}]}], ",", 
      " ", 
      RowBox[{
      "as", " ", "the", " ", "kx", " ", "function", " ", "gives", " ", "the", 
       " ", "row", " ", "of", " ", "a", " ", "matrix"}], ",", " ", "but", ",",
       " ", 
      RowBox[{"for", " ", "the", " ", "eigenvector"}], ",", " ", 
      RowBox[{"it", " ", "is", " ", "just", " ", 
       RowBox[{"a", " ", "'"}], 
       RowBox[{"column", "'"}], " ", "vector"}], ",", " ", 
      RowBox[{"so", " ", "just", " ", "use", " ", "ky"}]}], "*)"}], " ", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Normalize", "[", "EM", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"i", "-", "1"}], ")"}], "*", "Size"}], "+", "j"}], "]"}], 
        "]"}], "*", 
       RowBox[{"N", "[", 
        RowBox[{
         FractionBox[
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", "\[ImaginaryI]"}], "*", "2.", "*", 
            FractionBox["\[Pi]", "L"], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"ky", "[", 
                RowBox[{"i", ",", "Size"}], "]"}], "*", "x"}], "+", 
              RowBox[{
               RowBox[{"ky", "[", 
                RowBox[{"j", ",", "Size"}], "]"}], "*", "y"}]}], ")"}]}], 
           "]"}], "L"], ",", "8"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "Size"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "Size"}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.572128189351035*^9, 3.572128241737421*^9}, {
  3.5721323143106318`*^9, 3.572132352087255*^9}, {3.572132390263721*^9, 
  3.5721324988055277`*^9}, {3.572132711589464*^9, 3.572132747301024*^9}, {
  3.5721327948084507`*^9, 3.572132818413868*^9}, {3.5721338657642384`*^9, 
  3.572133926723633*^9}, {3.5721879922029543`*^9, 3.572188001611438*^9}, {
  3.5723693482479753`*^9, 3.572369349644309*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"GroundStatePlane", "[", 
   RowBox[{"p_", ",", "l_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "HMatrix", ",", "EN", ",", "G", ",", "m", ",", "k", ",", "n", ",", "q"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HMatrix", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"HPlane", "[", 
         RowBox[{"1.5", ",", "10", ",", "m", ",", "l", ",", "n", ",", "q"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"q", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"EN", " ", "=", " ", 
      RowBox[{"Eigensystem", "[", 
       RowBox[{
        RowBox[{"ArrayFlatten", "[", "HMatrix", "]"}], "-", 
        RowBox[{"100", "*", 
         RowBox[{"IdentityMatrix", "[", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "*", "p"}], "+", "1"}], ")"}], "2"], "]"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"G", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"EN", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", "100"}], ",", 
        RowBox[{
         RowBox[{"EN", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"GroundStatePlane", "[", 
   RowBox[{"p_", ",", "l_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "HMatrix", ",", "EN", ",", "G", ",", "m", ",", "k", ",", "n", ",", "q"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"HMatrix", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"HPlane", "[", 
         RowBox[{"1.5", ",", "10", ",", "m", ",", "l", ",", "n", ",", "q"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"m", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"q", ",", 
          RowBox[{"-", "p"}], ",", "p"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"EN", " ", "=", " ", 
      RowBox[{"Eigensystem", "[", 
       RowBox[{
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{"HMatrix", "//", "N"}], "]"}], "-", 
        RowBox[{"100", "*", 
         RowBox[{"IdentityMatrix", "[", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "*", "p"}], "+", "1"}], ")"}], "2"], "]"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"G", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"EN", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "+", "100"}], ",", 
        RowBox[{
         RowBox[{"EN", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Harmonic Oscillator Functions:
HMV1[1,2,.1,0,.5]\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.572128489356292*^9, 3.572128494635808*^9}, {
  3.573407653101918*^9, 3.573407667661433*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HMV1", "[", 
  RowBox[{"1", ",", "1", ",", ".1", ",", "0", ",", "0.5"}], "]"}]], "Input",
 CellChangeTimes->{{3.573407672423072*^9, 3.573407727825686*^9}}],

Cell[BoxData["0.01039132810647584`"], "Output",
 CellChangeTimes->{{3.573407696376131*^9, 3.5734077282896643`*^9}, 
   3.5738131660639796`*^9, 3.575510890902544*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HMV1", "[", 
  RowBox[{"1", ",", "2", ",", "0.1`", ",", "0.5`"}], "]"}]], "Input",
 CellChangeTimes->{3.573407691626629*^9}],

Cell[BoxData[
 RowBox[{"HMV1", "[", 
  RowBox[{"1", ",", "2", ",", "0.1`", ",", "0.5`"}], "]"}]], "Output",
 CellChangeTimes->{3.573407691906547*^9, 3.5738131660905137`*^9, 
  3.575510890955385*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HMV1", "[", 
   RowBox[{"l_", ",", "m_", ",", "\[Omega]_", ",", "b_", ",", "c_"}], "]"}], ":=",
   " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"Sqrt", "[", "\[Omega]", "]"}], 
      RowBox[{"Sqrt", "[", 
       RowBox[{
        SuperscriptBox["2", 
         RowBox[{"l", "+", "m"}]], 
        RowBox[{"Factorial", "[", "l", "]"}], "*", 
        RowBox[{"Factorial", "[", "m", "]"}]}], "]"}]], "*", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         SuperscriptBox["2", "k"], 
         RowBox[{"Factorial", "[", "k", "]"}], "*", 
         RowBox[{"Binomial", "[", 
          RowBox[{"l", ",", "k"}], "]"}], "*", 
         RowBox[{"Binomial", "[", 
          RowBox[{"m", ",", "k"}], "]"}], "*", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"2", "*", 
             FractionBox[
              RowBox[{"\[Omega]", "*", 
               SuperscriptBox["c", "2"]}], 
              RowBox[{"1", "+", 
               RowBox[{"2", 
                SuperscriptBox["c", "2"], "\[Omega]"}]}]]}]}], ")"}], 
          RowBox[{
           FractionBox[
            RowBox[{"(", 
             RowBox[{"m", "+", "l"}], ")"}], "2"], "-", "k"}]], "*", 
         RowBox[{"HermiteH", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"m", "+", "l", "-", 
             RowBox[{"2", "*", "k"}]}], ")"}], ",", 
           RowBox[{
            RowBox[{"Sqrt", "[", 
             FractionBox["\[Omega]", 
              RowBox[{"1", "+", 
               RowBox[{"2", "*", 
                SuperscriptBox["c", "2"], "*", "\[Omega]"}]}]], "]"}], "*", 
            "b"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "0", ",", 
         RowBox[{"Min", "[", 
          RowBox[{"m", ",", "l"}], "]"}]}], "}"}]}], "]"}], "*", 
     RowBox[{"Exp", "[", 
      RowBox[{
       FractionBox[
        SuperscriptBox["b", "2"], 
        RowBox[{"2", 
         SuperscriptBox["c", "2"]}]], 
       RowBox[{"(", 
        RowBox[{
         FractionBox["1", 
          RowBox[{"1", "+", 
           RowBox[{"2", 
            SuperscriptBox["c", "2"], "*", "\[Omega]"}]}]], "-", "1"}], 
        ")"}]}], "]"}], "*", 
     RowBox[{"Sqrt", "[", 
      FractionBox["2", 
       RowBox[{"1", "+", 
        RowBox[{"2", 
         SuperscriptBox["c", "2"], "*", "\[Omega]"}]}]], "]"}], "c"}], ")"}], 
   "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.573407687335093*^9, 3.573407718292557*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Hx2Anal2", "[", 
   RowBox[{"l_", ",", "m_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "*", "l"}], "+", "1"}], ")"}], "*", 
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"l", ",", "m"}], "]"}]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"l", "+", "1"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"l", "+", "2"}], ")"}]}], "]"}], 
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{
      RowBox[{"l", "+", "1"}], ",", 
      RowBox[{"m", "-", "1"}]}], "]"}]}], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"m", "+", "1"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"m", "+", "2"}], ")"}]}], "]"}], 
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{
      RowBox[{"l", "-", "1"}], ",", 
      RowBox[{"m", "+", "1"}]}], "]"}]}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"HOBasis", "[", 
   RowBox[{"V_", ",", "b_", ",", "c_", ",", "size_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Omega]", "=", 
      RowBox[{"Sqrt", "[", 
       FractionBox[
        RowBox[{"2", "V"}], 
        SuperscriptBox["c", "2"]], "]"}]}], "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["\[Omega]", "2"], "*", 
        RowBox[{"Hx2Anal2", "[", 
         RowBox[{"n", ",", "m"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["\[Omega]", "2"], "*", 
        RowBox[{"Hx2Anal2", "[", 
         RowBox[{"l", ",", "q"}], "]"}]}], "-", 
       RowBox[{"V", "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"n", ",", "m", ",", "\[Omega]", ",", "b", ",", "c"}], "]"}], 
        "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"l", ",", "q", ",", "\[Omega]", ",", "0", ",", "c"}], 
         "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"q", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.570885920269978*^9, 3.5708859340123653`*^9}, {
   3.570885984099249*^9, 3.570886075990157*^9}, {3.570886223990593*^9, 
   3.5708862621362886`*^9}, {3.570895371759161*^9, 3.570895424848665*^9}, {
   3.57089810518782*^9, 3.570898171012825*^9}, {3.5709835339686947`*^9, 
   3.5709835367828827`*^9}, 3.5709835802714243`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HOBasis1Well", "[", 
   RowBox[{"V_", ",", "c_", ",", "size_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Omega]", "=", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"2", "*", 
        FractionBox["V", 
         SuperscriptBox["c", "2"]]}], "]"}]}], "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["\[Omega]", "2"], "*", 
        RowBox[{"Hx2Anal2", "[", 
         RowBox[{"n", ",", "m"}], "]"}], "*", 
        RowBox[{"KroneckerDelta", "[", 
         RowBox[{"l", ",", "q"}], "]"}]}], "+", 
       RowBox[{
        FractionBox["\[Omega]", "2"], "*", 
        RowBox[{"Hx2Anal2", "[", 
         RowBox[{"l", ",", "q"}], "]"}], "*", 
        RowBox[{"KroneckerDelta", "[", 
         RowBox[{"m", ",", "n"}], "]"}]}], "-", 
       RowBox[{"V", "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"n", ",", "m", ",", "\[Omega]", ",", "0", ",", "c"}], "]"}], 
        "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"l", ",", "q", ",", "\[Omega]", ",", "0", ",", "c"}], 
         "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"l", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"q", ",", "0", ",", 
        RowBox[{"size", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.570898267668626*^9, 3.5708982805480013`*^9}, {
  3.570898960568728*^9, 3.570898981594881*^9}, {3.5708990116585703`*^9, 
  3.570899011963595*^9}, {3.5708990660276012`*^9, 3.570899066203285*^9}, {
  3.570983297935081*^9, 3.5709833033580017`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotGround", "[", 
   RowBox[{
   "\[CapitalPsi]_", ",", "H_", ",", "V_", ",", "c_", ",", "b_", ",", "size_",
     ","}], "]"}], ":=", " ", 
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "k", ",", "Em", ",", "M", ",", "HOBasis"}], "}"}], ",",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Sum", "[", 
         RowBox[{"k", ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"\[CapitalPsi]", "[", 
                RowBox[{"n", ",", "x", ",", "V", ",", "c"}], "]"}], "*", 
               RowBox[{
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"Em", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"n", "+", "1"}], "]"}], "]"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"n", ",", "0", ",", "size"}], "}"}]}], "]"}]}], 
           "}"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{
          FractionBox[
           RowBox[{"-", "V"}], 
           RowBox[{"c", "*", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"2", "\[Pi]"}], "]"}]}]], 
          RowBox[{"Exp", "[", 
           FractionBox[
            RowBox[{"-", 
             SuperscriptBox["x", "2"]}], 
            RowBox[{"4.", "*", "V", "*", 
             SuperscriptBox["c", "2"]}]], "]"}]}], "//", "N"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.57089525831597*^9, 3.570895279711782*^9}, {
  3.570897367385829*^9, 3.570897529953704*^9}, {3.572367062116728*^9, 
  3.572367076496973*^9}, {3.572367132873954*^9, 3.572367134357418*^9}}],

Cell[CellGroupData[{

Cell[BoxData["plotGround"], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.570895283855715*^9, 3.57089528638737*^9}}],

Cell[BoxData["plotGround"], "Output",
 CellChangeTimes->{
  3.572131566533577*^9, {3.57219536311866*^9, 3.572195382524304*^9}, 
   3.5738126588918796`*^9, {3.5738131654606256`*^9, 3.573813166160533*^9}, 
   3.5739013352798123`*^9, 3.573918065505396*^9, {3.575510889379368*^9, 
   3.575510891105443*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotGround2wellHO2d", "[", 
   RowBox[{"\[CapitalPsi]_", ",", "V_", ",", "b_", ",", "c_", ",", "size_"}], 
   "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"\[Omega]", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"2", "*", 
         FractionBox["V", 
          RowBox[{
           RowBox[{"6", "b", "*", "c"}], "+", 
           RowBox[{"9", 
            SuperscriptBox["c", "2"]}]}]]}], "]"}]}], ",", "HOBasis", ",", 
      "Em"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"HOBasis", "[", 
       RowBox[{"V", ",", "b", ",", "c", ",", "size", ",", "\[Omega]"}], "]"}],
       ":=", " ", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["\[Omega]", "2"], "*", 
            RowBox[{"Hx2Anal2", "[", 
             RowBox[{"n", ",", "m"}], "]"}]}], "+", 
           RowBox[{
            FractionBox["\[Omega]", "2"], "*", 
            RowBox[{"Hx2Anal2", "[", 
             RowBox[{"l", ",", "q"}], "]"}]}], "-", 
           RowBox[{"V", "*", 
            RowBox[{"HMV1", "[", 
             RowBox[{"n", ",", "m", ",", "\[Omega]", ",", 
              RowBox[{"-", "b"}], ",", "c"}], "]"}], "*", 
            RowBox[{"HMV1", "[", 
             RowBox[{"l", ",", "q", ",", "\[Omega]", ",", "b", ",", "c"}], 
             "]"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "0", ",", "size"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"l", ",", "0", ",", "size"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"m", ",", "0", ",", "size"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"q", ",", "0", ",", "size"}], "}"}]}], "]"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Em", " ", "=", " ", 
      RowBox[{
       RowBox[{"Eigensystem", "[", 
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{
          RowBox[{"HOBasis", "[", 
           RowBox[{
            SuperscriptBox["1.5", "2"], ",", "1", ",", ".5", ",", "7", ",", 
            "\[Omega]"}], "]"}], "-", 
          RowBox[{"1000", "*", 
           RowBox[{"IdentityMatrix", "[", "42", "]"}]}]}], "]"}], "]"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"{", 
          SuperscriptBox[
           RowBox[{"Abs", "[", 
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"\[CapitalPsi]", "[", 
                RowBox[{
                 RowBox[{"i", "-", "1"}], ",", "x", ",", "V", ",", "c", ",", 
                 "\[Omega]"}], "]"}], "*", 
               RowBox[{"\[CapitalPsi]", "[", 
                RowBox[{
                 RowBox[{"j", "-", "1"}], ",", "x", ",", "V", ",", "c", ",", 
                 "\[Omega]"}], "]"}], "*", 
               RowBox[{
                RowBox[{"Normalize", "[", 
                 RowBox[{
                  RowBox[{"Em", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "*", 
                   RowBox[{"(", "size", ")"}]}], "+", "j"}], "]"}], "]"}]}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", "17"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "1", ",", "17"}], "}"}]}], "]"}], "]"}], 
           "2"], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.57089533059254*^9, 3.570895347632304*^9}, {
   3.570895446145853*^9, 3.570895467825232*^9}, {3.570895522605443*^9, 
   3.570895560099419*^9}, {3.57089559772987*^9, 3.570895653763194*^9}, 
   3.570895741827547*^9, {3.570895806483992*^9, 3.570895821797204*^9}, {
   3.570895897602663*^9, 3.570895939687346*^9}, {3.5708960985682507`*^9, 
   3.570896117688366*^9}, {3.570896269414405*^9, 3.570896280191505*^9}, {
   3.570896341423107*^9, 3.5708964735857277`*^9}, {3.570896543131679*^9, 
   3.5708965723200207`*^9}, {3.570896614956777*^9, 3.570896645902726*^9}, {
   3.5708967228948307`*^9, 3.570896745810275*^9}, {3.570896796370328*^9, 
   3.570896798411419*^9}, {3.5708968441754827`*^9, 3.57089694268522*^9}, {
   3.57089699795343*^9, 3.5708970388476458`*^9}, 3.570897361581813*^9, {
   3.570897531315144*^9, 3.570897552919519*^9}, {3.570897584404173*^9, 
   3.570897648554591*^9}, {3.5734064731875877`*^9, 3.5734064779188223`*^9}, {
   3.573406542217595*^9, 3.573406566120376*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotGround2wellHO2dT", "[", 
   RowBox[{
   "\[CapitalPsi]_", ",", "V_", ",", "b_", ",", "c_", ",", "size_", ",", 
    "Em_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k", ",", 
      RowBox[{"\[Omega]", "=", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"2", "*", 
         FractionBox["V", 
          SuperscriptBox["c", "2"]]}], "]"}]}], ",", "x", ",", "y"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[CapitalPsi]", "[", 
         RowBox[{
          RowBox[{"i", "-", "1"}], ",", "x", ",", "V", ",", "c", ",", 
          "\[Omega]"}], "]"}], "*", 
        RowBox[{"\[CapitalPsi]", "[", 
         RowBox[{
          RowBox[{"j", "-", "1"}], ",", "y", ",", "V", ",", "c", ",", 
          "\[Omega]"}], "]"}], "*", 
        RowBox[{
         RowBox[{"Normalize", "[", 
          RowBox[{
           RowBox[{"Em", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"i", "-", "1"}], ")"}], "*", 
            RowBox[{"(", "size", ")"}]}], "+", "j"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "size"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "size"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Plot3D", "[", 
      RowBox[{
       RowBox[{"{", 
        SuperscriptBox[
         RowBox[{"Abs", "[", 
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[CapitalPsi]", "[", 
              RowBox[{
               RowBox[{"i", "-", "1"}], ",", "x", ",", "V", ",", "c", ",", 
               "\[Omega]"}], "]"}], "*", 
             RowBox[{"\[CapitalPsi]", "[", 
              RowBox[{
               RowBox[{"j", "-", "1"}], ",", "y", ",", "V", ",", "c", ",", 
               "\[Omega]"}], "]"}], "*", 
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{
                RowBox[{"Em", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], "*", 
                 RowBox[{"(", "size", ")"}]}], "+", "j"}], "]"}], "]"}]}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "size"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "1", ",", "size"}], "}"}]}], "]"}], "]"}], 
         "2"], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", 
         RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5708977492067337`*^9, 3.570897780689465*^9}, {
  3.5708978643700943`*^9, 3.570897879854721*^9}, {3.5708979105684958`*^9, 
  3.570897916455763*^9}, {3.570898041434421*^9, 3.570898046376409*^9}, {
  3.570988847464078*^9, 3.5709888590488987`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HM2Well", "[", 
   RowBox[{"V_", ",", "b_", ",", "c_", ",", "size_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Omega]", "=", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"2", "*", 
        FractionBox["V", 
         RowBox[{
          RowBox[{"6", "*", "b", "*", "c"}], "+", 
          RowBox[{"9", 
           SuperscriptBox["c", "2"]}]}]]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["\[Omega]", "2"], "*", 
        RowBox[{"Hx2Anal2", "[", 
         RowBox[{"n", ",", "m"}], "]"}]}], "-", 
       RowBox[{"V", "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"n", ",", "m", ",", "\[Omega]", ",", "b", ",", "c"}], 
         "]"}]}], "-", 
       RowBox[{"V", "*", 
        RowBox[{"HMV1", "[", 
         RowBox[{"n", ",", "m", ",", "\[Omega]", ",", 
          RowBox[{"-", "b"}], ",", "c"}], "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", "size"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", "size"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EnGround2wellHO", "[", 
   RowBox[{"V_", ",", "b_", ",", "c_", ",", "size_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"EnGround2wellHO", "[", 
    RowBox[{"V", ",", "b", ",", "c", ",", "size"}], "]"}], "=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Em", ",", "M"}], "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"M", "=", 
        RowBox[{
         RowBox[{"HM2Well", "[", 
          RowBox[{"V", ",", "b", ",", "c", ",", "size"}], "]"}], "-", 
         RowBox[{"1000", "*", 
          RowBox[{"IdentityMatrix", "[", 
           RowBox[{"size", "+", "1"}], "]"}]}]}]}], ")"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{"Em", "=", 
        RowBox[{"Eigenvalues", "[", "M", "]"}]}], ")"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.573406922906785*^9, 3.573406929084024*^9}, {
  3.573406970688098*^9, 3.5734070010456753`*^9}, {3.573407201441255*^9, 
  3.573407202800108*^9}, {3.5734080558973*^9, 3.5734080794661493`*^9}}],

Cell[CellGroupData[{

Cell["Sparse Matrices Stuff:", "Subsection",
 InitializationCell->True,
 CellChangeTimes->{{3.5721285859014063`*^9, 3.572128594332904*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"R", "[", 
   RowBox[{"deltaK_", ",", "L_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"R", "[", "deltaK", "]"}], "=", 
   RowBox[{
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", "*", 
           FractionBox["\[Pi]", "L"]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", "deltaK", ")"}], "2"]}], "8."], "]"}], "//", 
    "N"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571000978783464*^9, 3.571000995356388*^9}, {
   3.57100108162978*^9, 3.571001117827796*^9}, {3.571001225972803*^9, 
   3.571001269343255*^9}, {3.571001381201169*^9, 3.571001395328429*^9}, 
   3.571004628985114*^9, {3.571007252187564*^9, 3.5710072677402973`*^9}}],

Cell[BoxData[""], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571004666397975*^9, 3.571004700102571*^9}, {
  3.57100473234347*^9, 3.571004781941791*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"yIndex", "[", 
   RowBox[{"i_", ",", "size_"}], "]"}], " ", "=", 
  RowBox[{"Mod", "[", 
   RowBox[{"i", ",", "size", ",", "1"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571004907370202*^9, 3.571004924473065*^9}, {
  3.5710054483336563`*^9, 3.5710054492613583`*^9}, {3.571005547198454*^9, 
  3.571005548798235*^9}, {3.571005578974455*^9, 3.571005581518189*^9}, {
  3.571005916080695*^9, 3.571005917216366*^9}, {3.571006207794964*^9, 
  3.571006207937745*^9}, {3.571006840166703*^9, 3.57100684024616*^9}, {
  3.571076210663637*^9, 3.571076210823251*^9}}],

Cell[BoxData[
 RowBox[{"Mod", "[", 
  RowBox[{"i", ",", "size", ",", "1"}], "]"}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{
  3.5710762115073767`*^9, 3.5721253050147667`*^9, 3.57213035834122*^9, 
   3.5721315666206703`*^9, {3.5721953632791653`*^9, 3.57219538266177*^9}, 
   3.573812658960898*^9, {3.5738131655226808`*^9, 3.5738131662340345`*^9}, 
   3.5739013353778615`*^9, 3.573918065693384*^9, {3.575510890087516*^9, 
   3.575510891301587*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571076026372032*^9, 3.57107602933237*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
    "y", " ", "index", " ", "will", " ", "take", " ", "a", " ", "number", " ",
      "from", " ", "1"}], "-", "n"}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
      "and", " ", "convert", " ", "it", " ", "into", " ", "a", " ", "quantum",
        " ", "number", " ", "for", " ", 
       RowBox[{"ky", ".", " ", "This"}], " ", "will", " ", "be", " ", "an", 
       " ", "integer", " ", "starting", " ", "from"}], " ", "-", "p"}], 
     ".."}], 
    RowBox[{"p", "."}]}]}], "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.57107603194378*^9, 3.571076091161105*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"yIndex", "[", 
  RowBox[{"2", ",", "4"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571005038934815*^9, 3.5710050672733603`*^9}, {
  3.571005382620392*^9, 3.571005387291419*^9}, {3.5710054932604113`*^9, 
  3.571005504204275*^9}, {3.571005555084961*^9, 3.571005607580825*^9}, {
  3.57100564708575*^9, 3.571005649037367*^9}, {3.571005791198532*^9, 
  3.571005816590447*^9}, {3.5710060719045067`*^9, 3.571006073328672*^9}, {
  3.571006203681294*^9, 3.5710062607534933`*^9}, {3.571076215942932*^9, 
  3.5710762331426697`*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.5721315666774054`*^9, {3.5721953633743763`*^9, 3.5721953827609253`*^9}, 
   3.573812658993907*^9, {3.57381316556565*^9, 3.5738131662720437`*^9}, 
   3.5739013354288664`*^9, 3.573918066771693*^9, {3.575510890193816*^9, 
   3.575510891381921*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ky", "[", 
   RowBox[{"i_", ",", "size_"}], "]"}], "=", 
  RowBox[{
   RowBox[{"yIndex", "[", 
    RowBox[{"i", ",", "size"}], "]"}], "-", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"size", "-", "1"}], ")"}], "2"], "-", "1"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5710763687580748`*^9, 3.5710763940246277`*^9}, {
  3.5710765462181892`*^9, 3.571076615531767*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{"1", "-", "size"}], "2"], "+", 
  RowBox[{"Mod", "[", 
   RowBox[{"i", ",", "size", ",", "1"}], "]"}]}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{
  3.572130355085424*^9, 3.57213156672609*^9, {3.572195363481542*^9, 
   3.572195382827812*^9}, {3.573813165592656*^9, 3.57381316629757*^9}, 
   3.5739013354628696`*^9, 3.573918067264682*^9, {3.575510890247183*^9, 
   3.575510891433983*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "this", " ", "will", " ", "convert", " ", "our", " ", "index", " ", 
   "number", " ", "to", " ", "a", " ", "range", " ", "that", " ", "runs", " ",
    "over", " ", "negative", " ", "numbers", " ", "so", " ", "we", " ", "can",
    " ", "get", " ", "backwards", " ", "waves"}], "*)"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5721268972365522`*^9, 3.572126923589943*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"kx", "[", 
   RowBox[{"i_", ",", "size_"}], "]"}], "=", 
  RowBox[{
   RowBox[{"xIndex", "[", 
    RowBox[{"i", ",", "size"}], "]"}], "-", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"size", "-", "1"}], ")"}], "2"], "-", "1"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571076590427719*^9, 3.571076619339654*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"1", "-", "size"}], "2"], "+", 
  FractionBox[
   RowBox[{"i", "-", 
    RowBox[{"Mod", "[", 
     RowBox[{"i", ",", "size", ",", "1"}], "]"}]}], "size"]}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{{3.5710765950937767`*^9, 3.5710766201886*^9}, 
   3.5721252970286217`*^9, 3.572130353784877*^9, 3.5721315667749777`*^9, {
   3.57219536382935*^9, 3.572195382936722*^9}, 3.5738126590319166`*^9, {
   3.5738131656266804`*^9, 3.5738131663330665`*^9}, 3.573901335512876*^9, 
   3.573918067547678*^9, {3.575510890310977*^9, 3.575510891540152*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kx", "[", 
  RowBox[{"6", ",", "5"}], "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571076600371318*^9, 3.571076677513527*^9}}],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{{3.5710766086620207`*^9, 3.5710766778473263`*^9}, 
   3.572130351320689*^9, 3.572131566815014*^9, {3.5721953638982*^9, 
   3.572195383002089*^9}, 3.573812659056405*^9, {3.573813165653698*^9, 
   3.5738131663600645`*^9}, 3.57390133554788*^9, 3.5739180680913363`*^9, {
   3.575510890367057*^9, 3.575510891603878*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"xIndex", "[", 
   RowBox[{"i_", ",", "size_"}], "]"}], "=", 
  RowBox[{
   FractionBox[
    RowBox[{"(", 
     RowBox[{"i", "-", 
      RowBox[{"Mod", "[", 
       RowBox[{"i", ",", "size", ",", "1"}], "]"}]}], ")"}], "size"], "+", 
   "1"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.571004930287951*^9, 3.5710049523452063`*^9}, {
  3.571005317372704*^9, 3.571005318764783*^9}, {3.5710057394878883`*^9, 
  3.571005751535363*^9}, {3.571005930832862*^9, 3.571005931200572*^9}, {
  3.5710060235052032`*^9, 3.5710060497785254`*^9}, {3.571006165012313*^9, 
  3.5710061653792467`*^9}, {3.571006835208407*^9, 3.571006835303487*^9}, {
  3.571076261305995*^9, 3.571076261433284*^9}}],

Cell[BoxData[
 RowBox[{"1", "+", 
  FractionBox[
   RowBox[{"i", "-", 
    RowBox[{"Mod", "[", 
     RowBox[{"i", ",", "size", ",", "1"}], "]"}]}], "size"]}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{
  3.571004952693384*^9, 3.5710053193684464`*^9, 3.571005466457485*^9, 
   3.5710057520114*^9, 3.571006050237624*^9, 3.5710061663504143`*^9, 
   3.571006836195053*^9, 3.571073692860424*^9, 3.571076262340887*^9, 
   3.57212529925669*^9, 3.572130349645472*^9, 3.57213156685341*^9, {
   3.5721953639946547`*^9, 3.5721953830777283`*^9}, 3.573812659098934*^9, {
   3.5738131656812134`*^9, 3.5738131663855915`*^9}, 3.5739013355878854`*^9, 
   3.5739180721803427`*^9, {3.575510890389846*^9, 3.575510891624776*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildPlaneMatrix", "[", 
    RowBox[{"V_", ",", "L_", ",", "p_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"MDense", ",", "MDiag", ",", "i", ",", "j", ",", "M"}], "}"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MDense", " ", "=", " ", 
       RowBox[{
        RowBox[{"-", "V"}], "*", "\[Pi]", "*", 
        FractionBox["1", 
         RowBox[{"2", "*", 
          SuperscriptBox["L", "2"]}]], "*", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i_", ",", "j_"}], "}"}], "\[Rule]", 
           RowBox[{
            RowBox[{"R", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kx", "[", 
                RowBox[{"j", ",", "p"}], "]"}], "-", 
               RowBox[{"kx", "[", 
                RowBox[{"i", ",", "p"}], "]"}]}], ",", "L"}], "]"}], "*", 
            RowBox[{"R", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"ky", "[", 
                RowBox[{"j", ",", "p"}], "]"}], "-", 
               RowBox[{"ky", "[", 
                RowBox[{"i", ",", "p"}], "]"}]}], ",", "L"}], "]"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{
            SuperscriptBox["p", "2"], ",", 
            SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"MDiag", " ", "=", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i_", ",", "i_"}], "}"}], "\[Rule]", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"2", "*", 
              FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
           FractionBox[
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"kx", "[", 
                 RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"ky", "[", 
                 RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"]}], ")"}], 
            "2"]}]}], ",", 
         RowBox[{"{", 
          RowBox[{
           SuperscriptBox["p", "2"], ",", 
           SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"M", " ", "=", " ", 
       RowBox[{"MDense", "+", "MDiag"}]}]}]}], "\[IndentingNewLine]", "]"}]}],
   "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/eTcycPqs185KhzsPg2i133KuAqiw7hF74Poy1nn
v4Fol4UHf4Hok/OmGmkA6SKNFWC6ZIrsbRD96fD1xyCaz/L5SxDNYdn+BkSv
qF39EURv0tj3E0R3bU8X0ATSfa+mgWnRuU/kQfQbIUUNEJ0/X1kfRH8xswHT
bF/djEF0Q2eRGYi2OPE4FkR7lrwF03wnTnp4Aukfl+M9QfQiq12nQTST5dQr
IHqOy40FnnNfOZ5yYV4EolW0drwA0deOy78E0aLa5Z9BdNW0LWDa4MsZGx8g
7a14DUwvXrTvKYi+5lrwDEQDAJ4CnhI=
  "]],

Cell[BoxData[
 RowBox[{"Clear", "[", "R", "]"}]], "Input",
 CellChangeTimes->{{3.572131647363564*^9, 3.5721316570292053`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BuildPlaneMatrix2D2Well", "[", 
   RowBox[{"V_", ",", "L_", ",", "p_", ",", "b_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"MDense", ",", "MDiag", ",", "i", ",", "j", ",", "M"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
       "I", " ", "am", " ", "choosing", " ", "the", " ", "wells", " ", "to", 
        " ", "be", " ", "on", " ", "the", " ", "x"}], "-", "axis"}], ",", " ", 
      RowBox[{
       RowBox[{"so", " ", "the", " ", "y"}], "-", 
       RowBox[{"axis", " ", "dynamics", " ", 
        RowBox[{"shouldn", "'"}], "t", "\[IndentingNewLine]", 
        RowBox[{"change", ".", " ", "Notice"}]}]}], ",", " ", 
      RowBox[{
      "the", " ", "R2W", " ", "contains", " ", "b", " ", "information"}], ",",
       " ", 
      RowBox[{
      "and", " ", "will", " ", "be", " ", "used", " ", "for", " ", "the", " ", 
       RowBox[{"kx", "'"}], "s"}], ",", " ", 
      RowBox[{"while", " ", "the", " ", "R", " ", 
       RowBox[{"doesn", "'"}], "t"}], ",", " ", 
      RowBox[{
      "and", " ", "can", " ", "be", " ", "used", " ", "for", " ", "the", " ", 
       RowBox[{"ky", "'"}], "s", " ", "without", " ", "loss", " ", "of", " ", 
       "generality"}], ",", " ", 
      RowBox[{"because", " ", "there", " ", "are", " ", "two", " ", "wells"}],
       ",", " ", 
      RowBox[{
      "there", " ", "is", " ", "another", " ", "term", " ", "in", " ", "our", 
       " ", "MDense"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MDense", " ", "=", " ", 
      RowBox[{
       RowBox[{"-", "V"}], "*", "\[Pi]", "*", 
       FractionBox["1", 
        RowBox[{"2", "*", 
         SuperscriptBox["L", "2"]}]], "*", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i_", ",", "j_"}], "}"}], "\[Rule]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"R2W", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"kx", "[", 
                 RowBox[{"j", ",", "p"}], "]"}], "-", 
                RowBox[{"kx", "[", 
                 RowBox[{"i", ",", "p"}], "]"}]}], ",", "L", ",", "b"}], 
              "]"}], "+", 
             RowBox[{"R2W", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"kx", "[", 
                 RowBox[{"j", ",", "p"}], "]"}], "-", 
                RowBox[{"kx", "[", 
                 RowBox[{"i", ",", "p"}], "]"}]}], ",", "L", ",", 
               RowBox[{"-", "b"}]}], "]"}]}], ")"}], "*", 
           RowBox[{"R", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ky", "[", 
               RowBox[{"j", ",", "p"}], "]"}], "-", 
              RowBox[{"ky", "[", 
               RowBox[{"i", ",", "p"}], "]"}]}], ",", "L"}], "]"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{
           SuperscriptBox["p", "2"], ",", 
           SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"MDiag", " ", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i_", ",", "i_"}], "}"}], "\[Rule]", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"2", "*", 
             FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
          FractionBox[
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"kx", "[", 
                RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"ky", "[", 
                RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"]}], ")"}], 
           "2"]}]}], ",", 
        RowBox[{"{", 
         RowBox[{
          SuperscriptBox["p", "2"], ",", 
          SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"M", " ", "=", " ", 
      RowBox[{"MDense", "+", "MDiag"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5721267052277822`*^9, 3.572126705773741*^9}, {
  3.572127033781926*^9, 3.5721272320948067`*^9}, {3.572129464968992*^9, 
  3.5721294673137836`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"R2W", "[", 
   RowBox[{"deltaK_", ",", "L_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"R2W", "[", 
    RowBox[{"deltaK", ",", "L", ",", "b"}], "]"}], "=", 
   RowBox[{
    RowBox[{"Exp", "[", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2.", "*", "b"}], "+", 
          RowBox[{"\[ImaginaryI]", 
           RowBox[{"(", 
            RowBox[{"2.", "*", 
             FractionBox["\[Pi]", "L"]}], ")"}], 
           FractionBox[
            RowBox[{"(", "deltaK", ")"}], "2"]}]}], ")"}], "2"], "-", 
       RowBox[{"4.", "*", 
        SuperscriptBox["b", "2"]}]}], "2."], "]"}], "//", "N"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5721268078315277`*^9, 3.5721268599771137`*^9}, {
  3.5721269456740294`*^9, 3.572126964026145*^9}, {3.5721296396950617`*^9, 
  3.572129651772911*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Tunneling", " ", "for", " ", "a", " ", "2", "D", " ", "2", "Well", " ", 
    "case"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Tunneling2DWellListGen", "[", "basisnum_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "Need", " ", "to", " ", "double", " ", "check", " ", "that", " ", "L"}], 
     "=", 
     RowBox[{
     "1", " ", "is", " ", "okay", " ", "for", " ", "small", " ", "b"}]}], 
    "*)"}], 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"EnergyList", ",", "TunnelingList"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"EnergyList", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"b", ",", 
           RowBox[{
            RowBox[{"Eigenvalues", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"BuildPlaneMatrix2D2Well", "[", 
                RowBox[{"10", ",", "8", ",", "basisnum", ",", 
                 RowBox[{"b", "/", "2."}]}], "]"}], "-", 
               RowBox[{"1000.", "*", 
                RowBox[{"IdentityMatrix", "[", 
                 SuperscriptBox["basisnum", "2"], "]"}]}]}], ",", "2"}], 
             "]"}], "+", "1000"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", ".1", ",", "4", ",", ".2"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"TunnelingList", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"EnergyList", "[", 
             RowBox[{"[", "p", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"EnergyList", "[", 
               RowBox[{"[", "p", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "-", 
            RowBox[{
             RowBox[{
              RowBox[{"EnergyList", "[", 
               RowBox[{"[", "p", "]"}], "]"}], "[", 
              RowBox[{"[", "2", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"p", ",", "1", ",", 
           RowBox[{"Length", "[", "EnergyList", "]"}]}], "}"}]}], "]"}]}]}]}],
     "\n", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.572898683635507*^9, 3.5728988670804653`*^9}, {
   3.572898901199182*^9, 3.572898908059278*^9}, {3.572898958257339*^9, 
   3.572899076096239*^9}, {3.572899111755712*^9, 3.572899116962686*^9}, {
   3.5728991821113167`*^9, 3.5728991835178823`*^9}, {3.572899285183936*^9, 
   3.5728992989466867`*^9}, {3.572899424272739*^9, 3.5728994247352858`*^9}, {
   3.572899523970052*^9, 3.57289954929869*^9}, {3.572899660527895*^9, 
   3.5728996867980127`*^9}, {3.57289972612869*^9, 3.572899729216799*^9}, {
   3.5728997782653093`*^9, 3.572899778496242*^9}, {3.572899830738913*^9, 
   3.572899830980447*^9}, {3.572899887016218*^9, 3.572899911705093*^9}, {
   3.572899942805539*^9, 3.572899943366991*^9}, {3.572899987685001*^9, 
   3.57290000312385*^9}, {3.572900132235516*^9, 3.572900139162187*^9}, {
   3.572901797175879*^9, 3.5729017980865717`*^9}, 3.572902212202299*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"10", "/", "25."}]], "Input",
 CellChangeTimes->{{3.5729021970625763`*^9, 3.572902198714232*^9}}],

Cell[BoxData["0.4`"], "Output",
 CellChangeTimes->{3.572902199044324*^9, 3.5738131664496098`*^9, 
  3.575510891846574*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "1", "D", " ", "Functions", " ", "for", " ", "plane", " ", "waves"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.5723789053583527`*^9, 3.572378913475903*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"computePlaneMatrix2Well", "[", 
   RowBox[{"V_", ",", "c_", ",", "b_", ",", "length_", ",", "p_"}], "]"}], ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"l", ",", "m", ",", "H", ",", "Em", ",", "M", ",", "norm"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "First", " ", "normalize", " ", "the", " ", "plane", " ", "wave", " ", 
      "on", " ", "the", " ", "length"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"H", "[", 
       RowBox[{"l_", ",", "m_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{
        FractionBox[
         SuperscriptBox["m", "2"], "2"], 
        RowBox[{"KroneckerDelta", "[", 
         RowBox[{"m", ",", "l"}], "]"}]}], " ", "-", " ", 
       RowBox[{"V", "*", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{
           FractionBox["1", 
            RowBox[{"2", 
             SuperscriptBox["c", "2"]}]], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "b"}], "+", 
              RowBox[{"\[ImaginaryI]", "*", 
               SuperscriptBox["c", "2"], 
               RowBox[{"(", 
                RowBox[{"l", "-", "m"}], ")"}]}]}], ")"}], "2"]}], "-", 
          FractionBox[
           SuperscriptBox["b", "2"], 
           RowBox[{"2", 
            SuperscriptBox["c", "2"]}]]}], "]"}], "*", 
        RowBox[{"Sqrt", "[", "\[Pi]", "]"}], "*", 
        FractionBox[
         RowBox[{
          RowBox[{"Sqrt", "[", "2", "]"}], "c"}], "length"]}], "-", 
       RowBox[{"V", "*", 
        RowBox[{"Exp", "[", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            FractionBox["1", 
             RowBox[{"2", 
              SuperscriptBox["c", "2"]}]], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"b", "+", 
               RowBox[{"\[ImaginaryI]", "*", 
                SuperscriptBox["c", "2"], 
                RowBox[{"(", 
                 RowBox[{"l", "-", "m"}], ")"}]}]}], ")"}], "2"]}], "-", 
           FractionBox[
            SuperscriptBox["b", "2"], 
            RowBox[{"2", 
             SuperscriptBox["c", "2"]}]]}], ")"}], "]"}], "*", 
        RowBox[{"Sqrt", "[", "\[Pi]", "]"}], "*", 
        FractionBox[
         RowBox[{
          RowBox[{"Sqrt", "[", "2", "]"}], "c"}], "length"]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"M", " ", "=", " ", 
      RowBox[{"Eigensystem", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"H", "[", 
            RowBox[{
             RowBox[{"2", "\[Pi]", "*", 
              FractionBox["l", "length"]}], ",", 
             RowBox[{"2", "\[Pi]", "*", 
              FractionBox["m", "length"]}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"l", ",", 
             RowBox[{
              RowBox[{"-", "p"}], "/", "2."}], ",", 
             RowBox[{"p", "/", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"m", ",", 
             RowBox[{
              RowBox[{"-", "p"}], "/", "2."}], ",", 
             RowBox[{"p", "/", "2."}]}], "}"}]}], "]"}], "-", 
         RowBox[{"10000", "*", 
          RowBox[{"IdentityMatrix", "[", 
           RowBox[{"p", "+", "1"}], "]"}]}]}], ",", "3"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ComputePlaneWave", "[", 
   RowBox[{"V_", ",", "L_", ",", "p_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "MDense", ",", "MDiag", ",", "i", ",", "j", ",", "M", ",", "EM"}], "}"}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MDense", " ", "=", " ", 
      RowBox[{
       RowBox[{"-", "V"}], "*", "\[Pi]", "*", 
       FractionBox["1", 
        RowBox[{"2", "*", 
         SuperscriptBox["L", "2"]}]], "*", 
       RowBox[{"SparseArray", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i_", ",", "j_"}], "}"}], "\[Rule]", 
          RowBox[{
           RowBox[{"R", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"kx", "[", 
               RowBox[{"j", ",", "p"}], "]"}], "-", 
              RowBox[{"kx", "[", 
               RowBox[{"i", ",", "p"}], "]"}]}], ",", "L"}], "]"}], "*", 
           RowBox[{"R", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ky", "[", 
               RowBox[{"j", ",", "p"}], "]"}], "-", 
              RowBox[{"ky", "[", 
               RowBox[{"i", ",", "p"}], "]"}]}], ",", "L"}], "]"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{
           SuperscriptBox["p", "2"], ",", 
           SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"MDiag", " ", "=", 
      RowBox[{"SparseArray", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i_", ",", "i_"}], "}"}], "\[Rule]", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"2", "*", 
             FractionBox["\[Pi]", "L"]}], ")"}], "2"], 
          FractionBox[
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"kx", "[", 
                RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"ky", "[", 
                RowBox[{"i", ",", "p"}], "]"}], ")"}], "2"]}], ")"}], 
           "2"]}]}], ",", 
        RowBox[{"{", 
         RowBox[{
          SuperscriptBox["p", "2"], ",", 
          SuperscriptBox["p", "2"]}], "}"}], ",", "0"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"M", " ", "=", " ", 
      RowBox[{"MDense", "+", "MDiag"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"EM", " ", "=", " ", 
      RowBox[{"Eigensystem", "[", 
       RowBox[{
        RowBox[{"M", "-", 
         RowBox[{"10000", "*", 
          RowBox[{"IdentityMatrix", "[", 
           SuperscriptBox["p", "2"], "]"}]}]}], ",", "3"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.573404541555847*^9, 3.5734045459797707`*^9}, {
  3.573404580765032*^9, 3.5734046331788597`*^9}, {3.573404814204865*^9, 
  3.573404814542769*^9}, {3.573404896059642*^9, 3.573404922409494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ky", "[", 
  RowBox[{"5", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.5738141822258263`*^9, 3.573814189764825*^9}, {
  3.5738142682369037`*^9, 3.573814270812793*^9}, {3.5738143139620776`*^9, 
  3.57381432724021*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.573814190174921*^9, 3.5738142713483696`*^9, {3.5738143146234784`*^9, 
   3.5738143276386795`*^9}, 3.575510891986029*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"groundState1D", "[", 
   RowBox[{"EM_", ",", "L_", ",", "x_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Size", " ", "=", 
       RowBox[{"Length", "[", "EM", "]"}]}], ",", "i"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"EMn", " ", "=", " ", 
      RowBox[{"Normalize", "[", "EM", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"EMn", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "*", 
        RowBox[{"N", "[", 
         RowBox[{
          FractionBox[
           RowBox[{"Exp", "[", 
            RowBox[{
             RowBox[{"-", "\[ImaginaryI]"}], "*", "2.", "*", 
             FractionBox["\[Pi]", "L"], "*", 
             RowBox[{"ky", "[", 
              RowBox[{"i", ",", "Size"}], "]"}], "*", "x"}], "]"}], 
           RowBox[{"Sqrt", "[", "L", "]"}]], ",", "8"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "Size"}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.573404617802964*^9, 3.5734046283493023`*^9}, {
  3.573813990839531*^9, 3.573814170308418*^9}, {3.573814334963518*^9, 
  3.5738143731236496`*^9}, {3.573814476837121*^9, 3.5738144855907907`*^9}, {
  3.5738145389284325`*^9, 3.573814554191955*^9}, {3.5739014195309362`*^9, 
  3.5739014216582007`*^9}, {3.5739020356532536`*^9, 3.5739020402568293`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "EMn", "]"}]], "Input",
 CellChangeTimes->{{3.57381451515488*^9, 3.5738145177520294`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"groundState1Dplt", "[", 
    RowBox[{"V_", ",", "c_", ",", "b_", ",", "L_", ",", "p_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"WE", ",", "x", ",", "gstate", ",", "estate"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WE", " ", "=", " ", 
       RowBox[{"computePlaneMatrix2Well", "[", 
        RowBox[{"V", ",", "c", ",", "b", ",", "L", ",", "p"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gstate", "[", "x_", "]"}], ":=", 
       RowBox[{"groundState1D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"WE", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"estate", "[", "x_", "]"}], ":=", 
       RowBox[{"groundState1D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"WE", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"gstate", ",", "estate"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5739203661901503`*^9, 3.5739205085723467`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.574186432981463*^9, 3.574186437463563*^9}, 
   3.574440629370027*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "\[Pi]"}], ",", "\[Pi]", ",", ".1"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.574441374311872*^9, 3.574441403584223*^9}, {
  3.57444146673668*^9, 3.5744415033295383`*^9}}],

Cell[BoxData["0.9999232575641009`"], "Output",
 CellChangeTimes->{
  3.574441392665498*^9, {3.5744414691684513`*^9, 3.574441503920288*^9}, 
   3.575510892146102*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "e", ",", "t"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.574191458385735*^9, 3.57419147271308*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["a", 
    SqrtBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"Abs", "[", "a", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "e", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "t", "]"}], "2"]}]]], ",", 
   FractionBox["e", 
    SqrtBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"Abs", "[", "a", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "e", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "t", "]"}], "2"]}]]], ",", 
   FractionBox["t", 
    SqrtBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"Abs", "[", "a", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "e", "]"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "t", "]"}], "2"]}]]]}], "}"}]], "Output",
 CellChangeTimes->{3.574191473309415*^9, 3.575510892203626*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"WigMaker", "[", 
   RowBox[{"V_", ",", "c_", ",", "b_", ",", "L_", ",", "p_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "WE", ",", "WigPsi0", ",", "WigPsi1", ",", "Wig1", ",", "Wig2", ",", "x",
       ",", "test"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"WE", " ", "=", " ", 
      RowBox[{"computePlaneMatrix2Well", "[", 
       RowBox[{"V", ",", "c", ",", 
        RowBox[{"b", "/", "2."}], ",", "L", ",", "p"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"WE", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "+", "10000"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"groundState1D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"WE", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "12", ",", "x"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Now", ",", " ", 
       RowBox[{"take", " ", "the", " ", "eigenvectors"}], ",", " ", 
       RowBox[{
       "and", " ", "build", " ", "the", " ", "wannier", " ", "functions"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WigPsi0", " ", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"WigPsi1", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Check", " ", "normalization", " ", "of", " ", "the", " ", "ground", 
       " ", "and", " ", "excite", " ", "state"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "previous", " ", "version", " ", "of", " ", "wigmaker", " ", 
        "failed"}], ",", " ", 
       RowBox[{"as", " ", "WigPsi0", " ", 
        RowBox[{"wasn", "'"}], "t", " ", "always", " ", 
        RowBox[{"real", ".", " ", 
         RowBox[{"Ansatz", ":", " ", 
          RowBox[{
          "WigPsi0", " ", "and", " ", "WigPsi1", " ", "are", 
           "\[IndentingNewLine]", "conjugate", " ", "related"}], ":", " ", 
          RowBox[{
           RowBox[{"if", " ", "Im", " ", "Psi0"}], " ", "\[Equal]", 
           "0"}]}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"then", " ", "Re", " ", "Psi1"}], " ", "\[Equal]", "0"}]}], 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Wig1", "[", "x_", "]"}], ":=", 
      RowBox[{
       RowBox[{"Wig1", "[", "x", "]"}], "=", 
       RowBox[{"Abs", "[", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"WigPsi0", "[", "x", "]"}], "+", 
           RowBox[{"\[ImaginaryI]", "*", 
            RowBox[{"WigPsi1", "[", "x", "]"}]}]}], ")"}], 
         RowBox[{"Sqrt", "[", "2", "]"}]], "]"}]}]}], ";", "\n", 
     RowBox[{
      RowBox[{"Wig2", "[", "x_", "]"}], ":=", 
      RowBox[{
       RowBox[{"Wig2", "[", "x", "]"}], "=", 
       RowBox[{"Abs", "[", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"WigPsi0", "[", "x", "]"}], "-", 
           RowBox[{"\[ImaginaryI]", "*", 
            RowBox[{"WigPsi1", "[", "x", "]"}]}]}], ")"}], 
         RowBox[{"Sqrt", "[", "2", "]"}]], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"Wig1", ",", "Wig2", ",", 
       RowBox[{"WE", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.573904849000251*^9, 3.5739049308964987`*^9}, {
   3.5739049927574673`*^9, 3.573904993072507*^9}, {3.573918734880208*^9, 
   3.573918760874763*^9}, {3.573919150575371*^9, 3.573919156974297*^9}, {
   3.573919233696238*^9, 3.573919246259942*^9}, {3.573919489949943*^9, 
   3.5739195108920097`*^9}, {3.573920187578808*^9, 3.573920190509416*^9}, {
   3.573920457992897*^9, 3.573920461466565*^9}, {3.574440653560102*^9, 
   3.5744407367985573`*^9}, {3.5744411717284946`*^9, 3.574441183236487*^9}, {
   3.5744412626133947`*^9, 3.574441287628749*^9}, {3.5744413380647182`*^9, 
   3.5744413534252462`*^9}, {3.574441515046579*^9, 3.574441522763433*^9}, {
   3.574441578203649*^9, 3.5744417443821163`*^9}, 3.574441815342867*^9, {
   3.574441903841774*^9, 3.574441923925926*^9}, {3.5744420604607353`*^9, 
   3.574442106365342*^9}, {3.5744421473878317`*^9, 3.574442169928495*^9}, {
   3.574442210016183*^9, 3.5744422105617237`*^9}, {3.574442401008266*^9, 
   3.5744424480587463`*^9}, {3.574448276247374*^9, 3.574448346417096*^9}, {
   3.5745454996256437`*^9, 3.5745455011525*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Onsite", "[", 
   RowBox[{"V_", ",", "c_", ",", "b_", ",", "L_", ",", "p_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "WE", ",", "WigPsi0", ",", "WigPsi1", ",", "Wig1", ",", "Wig2", ",", "x",
       ",", "U"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"WE", " ", "=", " ", 
      RowBox[{"computePlaneMatrix2Well", "[", 
       RowBox[{"V", ",", "c", ",", "b", ",", "L", ",", "p"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"WE", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "+", "10000"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"groundState1D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"WE", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "12", ",", "x"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Now", ",", " ", 
       RowBox[{"take", " ", "the", " ", "eigenvectors"}], ",", " ", 
       RowBox[{
       "and", " ", "build", " ", "the", " ", "wannier", " ", "functions"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WigPsi0", " ", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "12", ",", "x"}], "]"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"WigPsi1", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "12", ",", "x"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Check", " ", "normalization", " ", "of", " ", "the", " ", "ground", 
       " ", "and", " ", "excite", " ", "state"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Wig1", "[", "x_", "]"}], "=", 
      FractionBox[
       RowBox[{
        RowBox[{"WigPsi0", "[", "x", "]"}], "+", 
        RowBox[{"\[ImaginaryI]", "*", 
         RowBox[{"WigPsi1", "[", "x", "]"}]}]}], 
       RowBox[{"Sqrt", "[", "2", "]"}]]}], ";", "\n", 
     RowBox[{
      RowBox[{"Wig2", "[", "x_", "]"}], "=", 
      FractionBox[
       RowBox[{
        RowBox[{"WigPsi0", "[", "x", "]"}], "-", 
        RowBox[{"\[ImaginaryI]", "*", 
         RowBox[{"WigPsi1", "[", "x", "]"}]}]}], 
       RowBox[{"Sqrt", "[", "2", "]"}]]}], ";", "\[IndentingNewLine]", 
     RowBox[{"U", " ", "=", 
      RowBox[{"NIntegrate", "[", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"Abs", "[", 
          RowBox[{"Wig1", "[", "x", "]"}], "]"}], "4"], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{
           RowBox[{"-", "L"}], "/", "2"}], ",", 
          RowBox[{"L", "/", "2"}]}], "}"}]}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5739049339778824`*^9, 3.5739049916373315`*^9}, {
  3.573918902584927*^9, 3.573919015753026*^9}, {3.573919067350594*^9, 
  3.573919076550849*^9}, {3.573919140109489*^9, 3.573919146246747*^9}, {
  3.573919269436802*^9, 3.5739192852807703`*^9}, {3.573920140835112*^9, 
  3.573920171116066*^9}, {3.574534902279461*^9, 3.5745349072816772`*^9}, {
  3.574541574835185*^9, 3.574541604015381*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "Onsite", "]"}]], "Input",
 CellChangeTimes->{{3.5739189371866903`*^9, 3.5739189394489117`*^9}, {
  3.573919019338895*^9, 3.573919038560575*^9}, {3.573919084731183*^9, 
  3.5739190871318007`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Re", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"WigMaker", "[", 
        RowBox[{"10", ",", ".5", ",", ".4", ",", "12", ",", "14"}], "]"}], 
       "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", "x", "]"}], "]"}], "2"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.573919412140543*^9, 3.573919453391011*^9}, {
  3.5739195223345623`*^9, 3.573919526653679*^9}, {3.573920160010062*^9, 
  3.573920160889051*^9}, {3.574441829635344*^9, 3.574441835681898*^9}, {
  3.5744421179887733`*^9, 3.574442123060939*^9}, {3.5744421801822987`*^9, 
  3.57444218363656*^9}, {3.574442452937963*^9, 3.574442455691884*^9}, {
  3.574449363057413*^9, 3.5744494215092897`*^9}}],

Cell[BoxData["0.9999999975263432`"], "Output",
 CellChangeTimes->{{3.574442203489525*^9, 3.574442213669272*^9}, {
   3.574442395161953*^9, 3.5744424562042923`*^9}, {3.574449377755362*^9, 
   3.574449422296476*^9}, 3.57551089331073*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "WigMaker", "]"}]], "Input",
 CellChangeTimes->{{3.574442190094067*^9, 3.574442196355524*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"3", ">", "4"}], ",", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"g", "[", "x_", "]"}], ":=", 
      SuperscriptBox["x", "2"]}], ";", 
     RowBox[{
      RowBox[{"y", "[", "x_", "]"}], ":=", 
      SuperscriptBox["x", "3"]}]}], ")"}], ",", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"g", "[", "x_", "]"}], ":=", "0"}], ";", 
     RowBox[{
      RowBox[{"y", "[", "x_", "]"}], ":=", "1"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5744419415298862`*^9, 3.5744420265355463`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.574442030789143*^9, 3.574442033906208*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.574442034352131*^9, 3.5744420525965157`*^9}, 
   3.575510893477924*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Clear", "[", "g", "]"}], ";", " ", 
  RowBox[{"Clear", "[", "y", "]"}]}]], "Input",
 CellChangeTimes->{{3.574442039763131*^9, 3.574442047874914*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WigMakerTest", "[", 
   RowBox[{"V_", ",", "c_", ",", "b_", ",", "L_", ",", "p_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "WE", ",", "WigPsi0", ",", "WigPsi1", ",", "Wig1", ",", "Wig2", ",", "x",
       ",", "test"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"WE", " ", "=", " ", 
      RowBox[{"computePlaneMatrix2Well", "[", 
       RowBox[{"V", ",", "c", ",", "b", ",", "L", ",", "p"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"WE", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "+", "10000"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"groundState1D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"WE", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "12", ",", "x"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Now", ",", " ", 
       RowBox[{"take", " ", "the", " ", "eigenvectors"}], ",", " ", 
       RowBox[{
       "and", " ", "build", " ", "the", " ", "wannier", " ", "functions"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WigPsi0", " ", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"WigPsi1", "[", "x_", "]"}], " ", "=", " ", 
      RowBox[{"groundState1D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WE", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "L", ",", "x"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Check", " ", "normalization", " ", "of", " ", "the", " ", "ground", 
       " ", "and", " ", "excite", " ", "state"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "previous", " ", "version", " ", "of", " ", "wigmaker", " ", 
        "failed"}], ",", " ", 
       RowBox[{"as", " ", "WigPsi0", " ", 
        RowBox[{"wasn", "'"}], "t", " ", "always", " ", 
        RowBox[{"real", ".", " ", 
         RowBox[{"Ansatz", ":", " ", 
          RowBox[{
          "WigPsi0", " ", "and", " ", "WigPsi1", " ", "are", 
           "\[IndentingNewLine]", "conjugate", " ", "related"}], ":", " ", 
          RowBox[{
           RowBox[{"if", " ", "Im", " ", "Psi0"}], " ", "\[Equal]", 
           "0"}]}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"then", " ", "Re", " ", "Psi1"}], " ", "\[Equal]", "0"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"WigPsi0", "[", "x", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{
              RowBox[{"-", "L"}], "/", "2."}], ",", 
             RowBox[{"L", "/", "2."}], ",", 
             RowBox[{"L", "/", "4."}]}], "}"}]}], "]"}], "]"}], ">", 
        RowBox[{"Max", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Im", "[", 
            RowBox[{"WigPsi0", "[", "x", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{
              RowBox[{"-", "L"}], "/", "2."}], ",", 
             RowBox[{"L", "/", "2."}], ",", 
             RowBox[{"L", "/", "4."}]}], "}"}]}], "]"}], "]"}]}], ",", "1", 
       ",", "0"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.574442243902439*^9, 3.57444231960139*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WigMakerTest", "[", 
  RowBox[{"10", ",", ".5", ",", ".4", ",", "12", ",", "14"}], "]"}]], "Input",
 CellChangeTimes->{{3.5744422713722143`*^9, 3.574442281892806*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.574442283398407*^9, 3.574442321877355*^9, 
  3.575510893610695*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1295, 613},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.5, 1.5 Inherited],
FrontEndVersion->"9.0 for Linux x86 (32-bit) (February 7, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 768, 18, 133, "Input"],
Cell[CellGroupData[{
Cell[1350, 42, 371, 7, 45, "Input"],
Cell[1724, 51, 364, 9, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2125, 65, 960, 29, 86, "Input"],
Cell[3088, 96, 70595, 1164, 392, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73720, 1265, 608, 19, 86, "Input"],
Cell[74331, 1286, 21192, 354, 378, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95560, 1645, 730, 22, 87, "Input"],
Cell[96293, 1669, 163, 3, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96493, 1677, 698, 22, 87, "Input"],
Cell[97194, 1701, 88, 1, 67, "Output"]
}, Open  ]],
Cell[97297, 1705, 296, 7, 45, "Input"],
Cell[CellGroupData[{
Cell[97618, 1716, 1323, 35, 246, "Input"],
Cell[98944, 1753, 911, 16, 88, "Message"],
Cell[99858, 1771, 910, 16, 88, "Message"],
Cell[100771, 1789, 913, 15, 88, "Message"],
Cell[101687, 1806, 555, 11, 33, "Message"],
Cell[102245, 1819, 1013, 21, 381, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103295, 1845, 1223, 33, 246, "Input"],
Cell[104521, 1880, 888, 16, 88, "Message"],
Cell[105412, 1898, 880, 16, 88, "Message"],
Cell[106295, 1916, 871, 16, 88, "Message"],
Cell[107169, 1934, 532, 11, 33, "Message"],
Cell[107704, 1947, 768, 17, 381, "Output"]
}, Open  ]],
Cell[108487, 1967, 228, 6, 45, "Input"],
Cell[108718, 1975, 531, 17, 89, "Input"],
Cell[109252, 1994, 531, 17, 89, "Input"],
Cell[CellGroupData[{
Cell[109808, 2015, 1302, 33, 246, "Input"],
Cell[111113, 2050, 907, 16, 88, "Message"],
Cell[112023, 2068, 891, 15, 88, "Message"],
Cell[112917, 2085, 887, 15, 88, "Message"],
Cell[113807, 2102, 555, 11, 33, "Message"],
Cell[114365, 2115, 1013, 21, 419, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115415, 2141, 1247, 34, 246, "Input"],
Cell[116665, 2177, 884, 15, 88, "Message"],
Cell[117552, 2194, 871, 16, 88, "Message"],
Cell[118426, 2212, 871, 16, 88, "Message"],
Cell[119300, 2230, 533, 11, 33, "Message"],
Cell[119836, 2243, 956, 20, 394, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120829, 2268, 448, 13, 45, "Input"],
Cell[121280, 2283, 72458, 1195, 378, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193775, 3483, 122, 2, 121, "Section",
 InitializationCell->True],
Cell[193900, 3487, 176, 3, 76, "Text",
 InitializationCell->True],
Cell[194079, 3492, 588, 17, 81, "Input",
 InitializationCell->True],
Cell[194670, 3511, 1907, 52, 217, "Input",
 InitializationCell->True],
Cell[196580, 3565, 2264, 65, 300, "Input",
 InitializationCell->True],
Cell[198847, 3632, 2018, 56, 221, "Input",
 InitializationCell->True],
Cell[200868, 3690, 2955, 75, 366, "Input",
 InitializationCell->True],
Cell[203826, 3767, 2965, 89, 321, "Input",
 InitializationCell->True],
Cell[206794, 3858, 920, 26, 133, "Input",
 InitializationCell->True],
Cell[207717, 3886, 3292, 78, 399, "Input",
 InitializationCell->True],
Cell[211012, 3966, 1830, 53, 178, "Input",
 InitializationCell->True],
Cell[212845, 4021, 1861, 54, 178, "Input",
 InitializationCell->True],
Cell[214709, 4077, 214, 6, 76, "Text",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[214948, 4087, 179, 3, 45, "Input"],
Cell[215130, 4092, 165, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215332, 4099, 148, 3, 45, "Input"],
Cell[215483, 4104, 198, 4, 45, "Output"]
}, Open  ]],
Cell[215696, 4111, 2606, 77, 404, "Input",
 InitializationCell->True],
Cell[218305, 4190, 1043, 36, 221, "Input",
 InitializationCell->True],
Cell[219351, 4228, 1786, 47, 257, "Input",
 InitializationCell->True],
Cell[221140, 4277, 1884, 50, 291, "Input",
 InitializationCell->True],
Cell[223027, 4329, 2067, 55, 305, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[225119, 4388, 128, 2, 45, "Input",
 InitializationCell->True],
Cell[225250, 4392, 303, 5, 45, "Output"]
}, Open  ]],
Cell[225568, 4400, 4918, 117, 532, "Input",
 InitializationCell->True],
Cell[230489, 4519, 3360, 90, 352, "Input",
 InitializationCell->True],
Cell[233852, 4611, 1206, 35, 240, "Input"],
Cell[235061, 4648, 1119, 28, 162, "Input"],
Cell[CellGroupData[{
Cell[236205, 4680, 139, 2, 67, "Subsection",
 InitializationCell->True],
Cell[236347, 4684, 798, 22, 102, "Input",
 InitializationCell->True],
Cell[237148, 4708, 167, 3, 45, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[237340, 4715, 616, 12, 45, "Input",
 InitializationCell->True],
Cell[237959, 4729, 463, 9, 45, "Output",
 InitializationCell->True]
}, Open  ]],
Cell[238437, 4741, 118, 2, 45, "Input",
 InitializationCell->True],
Cell[238558, 4745, 669, 18, 104, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[239252, 4767, 570, 10, 45, "Input",
 InitializationCell->True],
Cell[239825, 4779, 298, 5, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240160, 4789, 426, 12, 81, "Input",
 InitializationCell->True],
Cell[240589, 4803, 481, 12, 66, "Output",
 InitializationCell->True]
}, Open  ]],
Cell[241085, 4818, 432, 8, 75, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[241542, 4830, 371, 11, 81, "Input",
 InitializationCell->True],
Cell[241916, 4843, 605, 13, 66, "Output",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[242558, 4861, 171, 4, 45, "Input",
 InitializationCell->True],
Cell[242732, 4867, 407, 7, 45, "Output",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[243176, 4879, 729, 17, 82, "Input",
 InitializationCell->True],
Cell[243908, 4898, 723, 14, 66, "Output",
 InitializationCell->True]
}, Open  ]],
Cell[244646, 4915, 2993, 81, 448, "Input",
 InitializationCell->True],
Cell[247642, 4998, 126, 2, 45, "Input"],
Cell[247771, 5002, 4363, 114, 534, "Input",
 InitializationCell->True],
Cell[252137, 5118, 916, 26, 102, "Input",
 InitializationCell->True],
Cell[253056, 5146, 3333, 79, 422, "Input"],
Cell[CellGroupData[{
Cell[256414, 5229, 120, 2, 45, "Input"],
Cell[256537, 5233, 122, 2, 45, "Output"]
}, Open  ]],
Cell[256674, 5238, 201, 5, 45, "Input"],
Cell[256878, 5245, 3431, 96, 546, "Input"],
Cell[260312, 5343, 3026, 83, 481, "Input"],
Cell[CellGroupData[{
Cell[263363, 5430, 247, 5, 45, "Input"],
Cell[263613, 5437, 173, 3, 45, "Output"]
}, Open  ]],
Cell[263801, 5443, 1477, 36, 234, "Input"],
Cell[265281, 5481, 127, 2, 45, "Input"],
Cell[265411, 5485, 1385, 36, 220, "Input"],
Cell[266799, 5523, 118, 2, 45, "Input"],
Cell[CellGroupData[{
Cell[266942, 5529, 365, 10, 45, "Input"],
Cell[267310, 5541, 165, 3, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267512, 5549, 184, 4, 45, "Input"],
Cell[267699, 5555, 930, 30, 153, "Output"]
}, Open  ]],
Cell[268644, 5588, 5017, 119, 635, "Input"],
Cell[273664, 5709, 3468, 90, 496, "Input"],
Cell[277135, 5801, 233, 4, 45, "Input"],
Cell[CellGroupData[{
Cell[277393, 5809, 835, 19, 52, "Input"],
Cell[278231, 5830, 235, 3, 45, "Output"]
}, Open  ]],
Cell[278481, 5836, 131, 2, 45, "Input"],
Cell[278615, 5840, 576, 18, 52, "Input"],
Cell[CellGroupData[{
Cell[279216, 5862, 120, 2, 45, "Input"],
Cell[279339, 5866, 122, 2, 45, "Output"]
}, Open  ]],
Cell[279476, 5871, 184, 4, 45, "Input"],
Cell[279663, 5877, 3814, 100, 423, "Input"],
Cell[CellGroupData[{
Cell[283502, 5981, 191, 3, 45, "Input"],
Cell[283696, 5986, 117, 2, 45, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
